<!DOCTYPE html>
<html lang="en" class="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <style>
    :root {
      --primary-dark: #1f2937;
      --secondary-dark: #111827;
      --accent-blue: #3b82f6;
      --text-primary: #e5e7eb;
      --text-secondary: #9ca3af;
    }

    body {
      background-color: var(--secondary-dark);
      color: var(--text-primary);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in-up {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    .form-section {
      background: var(--primary-dark);
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .form-section:hover {
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.4);
      border-color: rgba(59, 130, 246, 0.4);
    }

    .section-header {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
      padding-bottom: 0.5rem;
      border-bottom: 2px solid rgba(59, 130, 246, 0.3);
      margin-bottom: 1.5rem;
    }

    .input-box input,
    .input-box textarea,
    .input-box select {
      background: rgba(17, 24, 39, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: var(--text-primary);
      padding: 0.75rem 1rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      width: 100%;
    }

    .input-box input:focus,
    .input-box textarea:focus,
    .input-box select:focus {
      background: rgba(17, 24, 39, 0.95);
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
      outline: none;
    }

    .image-upload {
      border: 2px dashed rgba(255, 255, 255, 0.2);
      background: rgba(17, 24, 39, 0.6);
      transition: all 0.3s ease;
    }

    .image-upload:hover {
      border-color: var(--accent-blue);
      background: rgba(17, 24, 39, 0.8);
    }

    .save-button {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      color: white;
      padding: 0.75rem 2rem;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s ease;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .save-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      background: linear-gradient(135deg, #2563eb, #1d4ed8);
    }

    .image-preview-container {
      position: relative;
      animation: fadeIn 0.3s ease-out;
    }

    .image-container {
      position: relative;
      transition: all 0.3s ease;
    }

    .image-container:hover .image-overlay {
      opacity: 1;
    }

    .image-overlay {
      position: absolute;
      inset: 0;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transition: opacity 0.3s ease;
      border-radius: 8px;
    }

    .remove-image-btn {
      background: #ef4444;
      color: white;
      padding: 0.5rem;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }

    .remove-image-btn:hover {
      background: #dc2626;
      transform: scale(1.1);
    }

    /* Cropper modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
    }

    .modal-content {
        position: relative;
        margin: auto;
        padding: 20px;
        width: 90%;
        max-width: 800px;
        top: 50%;
        transform: translateY(-50%);
        background: var(--primary-dark);
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    .cropper-container {
        width: 100%;
        height: 400px;
        background: #000;
        margin-bottom: 20px;
    }

    .crop-btn {
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .crop-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .close-modal {
        position: absolute;
        right: 20px;
        top: 20px;
        color: #fff;
        font-size: 24px;
        cursor: pointer;
    }
  </style>
</head>

<body class="min-h-screen">
  <%- include('../layouts/side.ejs') %>
  <%- include('../layouts/head.ejs') %>

  <div class="flex-1 ml-64 p-12">
    <!-- Header Section -->
    <div class="flex items-center justify-between mb-8 fade-in-up">
      <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 text-transparent bg-clip-text">
        Add Product
      </h1>
    </div>

    <!-- Error Message Section -->
    <% if (error_msg && error_msg.length > 0) { %>
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6 fade-in-up" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline"><%= error_msg %></span>
        </div>
    <% } %>

    <!-- Success Message Section -->
    <% if (success_msg && success_msg.length > 0) { %>
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-6 fade-in-up" role="alert">
            <strong class="font-bold">Success!</strong>
            <span class="block sm:inline"><%= success_msg %></span>
        </div>
    <% } %>

    <form action="/admin/add-product" method="post" enctype="multipart/form-data">
      <!-- General Information Section -->
      <div class="form-section p-6 mb-6 fade-in-up">
        <h2 class="section-header">General Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Product Name</label>
            <input type="text" name="name" placeholder="Enter product name"  />
          </div>
          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Unit Type</label>
            <select name="unit" class="w-full" onchange="toggleUnitFields(this.value)">
              <option value="">Select unit type</option>
              <option value="kg">Kilogram (KG)</option>
              <option value="nos">Numbers (NOS)</option>
            </select>
          </div>

          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2" id="unitQuantityLabel">Unit Quantity</label>
            <div class="flex items-center gap-2">
              <input type="number" 
                     name="unitQuantity" 
                     id="unitQuantity" 
                     placeholder="Enter unit quantity"
                     class="flex-1" />
              <span id="unitText" class="text-gray-400 w-16">KG/PC</span>
            </div>
            <p class="text-sm text-gray-500 mt-1" id="unitHelperText">
              For kg: Enter in kilograms (e.g., 0.25 for 250g)
            </p>
          </div>

          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Stock Quantity</label>
            <input type="number" name="quantity" placeholder="Enter stock quantity" />
            <p class="text-sm text-gray-500 mt-1">Number of units in stock</p>
          </div>
          <div class="col-span-2 input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Description</label>
            <textarea name="description" rows="4" placeholder="Enter product description" ></textarea>
          </div>
        </div>
      </div>

      <!-- Pricing Section -->
      <div class="form-section p-6 mb-6 fade-in-up">
        <h2 class="section-header">Pricing Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Base Price</label>
            <input type="number" name="price" placeholder="Enter base price"  />
          </div>
          <div class="input-box">
            <label class="block text-sm font-medium text-gray-400 mb-2">Discount Percentage</label>
            <input type="decimal" name="discount" placeholder="Enter discount percentage" />
          </div>
        </div>
      </div>

      <!-- Category Section -->
      <div class="form-section p-6 mb-6 fade-in-up">
        <h2 class="section-header">Category</h2>
        <div class="input-box">
          <label class="block text-sm font-medium text-gray-400 mb-2">Product Category</label>
          <select name="category" class="w-full" >
            <option value="">Select category</option>
            <% categories.forEach(category => { %>
            <option value="<%= category.name %>"><%= category.name %></option>
            <% }) %>
          </select>
        </div>
      </div>

      <!-- Images Section -->
      <div class="form-section p-6 mb-6 fade-in-up">
        <h2 class="section-header">Product Images</h2>
        <div class="image-upload rounded-lg p-6 text-center">
          <input type="file" name="productImage" accept="image/png, image/jpeg, image/jpg" multiple class="hidden" id="imageInput" />
          <label for="imageInput" class="cursor-pointer block">
            <i class="fas fa-cloud-upload-alt text-3xl mb-2 text-blue-500"></i>
            <p class="text-gray-400">Drop your images here or click to browse</p>
            <p class="text-sm text-gray-500 mt-2">Maximum 5 images allowed</p>
          </label>
          <div id="imageValidationErrors" class="mt-2"></div>
        </div>
        <div id="imagePreview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4"></div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-center mb-6 fade-in-up">
        <button type="submit" class="save-button">
          <i class="fas fa-plus mr-2"></i>
          Add Product
        </button>
      </div>
    </form>
  </div>

  <!-- Cropper Modal -->
  <div id="cropperModal" class="modal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="flex justify-end gap-4">
            <button type="button" class="crop-btn" id="cropButton">
                <i class="fas fa-crop-alt mr-2"></i>Crop Image
            </button>
        </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
        const imageInput = document.getElementById('imageInput');
        const imagePreview = document.getElementById('imagePreview');
        const imageValidationErrors = document.getElementById('imageValidationErrors');
        const modal = document.getElementById('cropperModal');
        const cropperImage = document.getElementById('cropperImage');
        const cropButton = document.getElementById('cropButton');
        const closeModal = document.querySelector('.close-modal');
        let cropper = null;
        let currentImageIndex = 0;
        let croppedImages = [];
        let selectedFiles = [];

        function showImageError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-500 text-sm mt-1 font-medium';
            errorDiv.innerHTML = `<i class="fas fa-exclamation-circle mr-1"></i>${message}`;
            imageValidationErrors.appendChild(errorDiv);
        }

        function clearImageErrors() {
            imageValidationErrors.innerHTML = '';
        }

        imageInput.addEventListener('change', function(e) {
            clearImageErrors();
            const files = Array.from(e.target.files);
            let hasErrors = false;
            
            // Validate number of files
            if (files.length > 5) {
                showImageError('You can only upload a maximum of 5 images');
                hasErrors = true;
            }

            // Validate each file
            files.forEach(file => {
                const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                const maxSize = 5 * 1024 * 1024; // 5MB
                
                if (!validTypes.includes(file.type)) {
                    showImageError(`${file.name} is not a valid image type. Only JPG, JPEG, and PNG are allowed.`);
                    hasErrors = true;
                }
                
                if (file.size > maxSize) {
                    showImageError(`${file.name} is too large. Maximum file size is 5MB.`);
                    hasErrors = true;
                }
            });

            if (hasErrors) {
                imageInput.value = '';
                imagePreview.innerHTML = '';
                return;
            }

            selectedFiles = files;
            currentImageIndex = 0;
            croppedImages = [];
            imagePreview.innerHTML = '';

            // Start with the first image
            showCropper(files[0]);
        });

        function showCropper(file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                cropperImage.src = e.target.result;
                modal.style.display = 'block';
                
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    dragMode: 'move',
                    autoCropArea: 1,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            };
            reader.readAsDataURL(file);
        }

        cropButton.addEventListener('click', function() {
            const croppedCanvas = cropper.getCroppedCanvas({
                width: 600,
                height: 600
            });

            croppedCanvas.toBlob(function(blob) {
                const croppedFile = new File([blob], selectedFiles[currentImageIndex].name, {
                    type: 'image/jpeg',
                    lastModified: new Date().getTime()
                });
                
                croppedImages.push(croppedFile);
                
                // Add preview
                const previewContainer = document.createElement('div');
                previewContainer.className = 'image-preview-container';
                previewContainer.innerHTML = `
                    <div class="image-container relative group">
                        <img src="${croppedCanvas.toDataURL()}" class="w-full h-32 object-cover rounded-lg shadow-md" />
                        <div class="image-overlay">
                            <button type="button" class="remove-image-btn" onclick="removePreviewImage(this)">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
                imagePreview.appendChild(previewContainer);

                currentImageIndex++;
                if (currentImageIndex < selectedFiles.length) {
                    showCropper(selectedFiles[currentImageIndex]);
                } else {
                    modal.style.display = 'none';
                    cropper.destroy();
                    cropper = null;
                    
                    // Update the input files with cropped images
                    const dataTransfer = new DataTransfer();
                    croppedImages.forEach(file => {
                        dataTransfer.items.add(file);
                    });
                    imageInput.files = dataTransfer.files;
                }
            }, 'image/jpeg', 0.9);
        });

        closeModal.addEventListener('click', function() {
            modal.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            // Reset everything if user closes modal
            imageInput.value = '';
            imagePreview.innerHTML = '';
            currentImageIndex = 0;
            croppedImages = [];
            selectedFiles = [];
        });

        // Close modal if clicking outside
        window.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeModal.click();
            }
        });

        // Existing functions
        function showError(message) {
            imageError.textContent = message;
            imageError.classList.remove('hidden');
        }

        function hideError() {
            imageError.textContent = '';
            imageError.classList.add('hidden');
        }

        window.removePreviewImage = function(button) {
            const container = button.closest('.image-preview-container');
            const index = Array.from(imagePreview.children).indexOf(container);
            
            croppedImages.splice(index, 1);
            
            // Update the input files
            const dataTransfer = new DataTransfer();
            croppedImages.forEach(file => {
                dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
            
            container.remove();

            // Show error if no images remain
            if (croppedImages.length === 0) {
                showImageError('At least one product image is required');
            }
        };

        // Update form validation
        const form = document.querySelector('form');
        form.addEventListener('submit', function(e) {
            clearImageErrors();
            
            if (!imageInput.files.length) {
                showImageError('At least one product image is required');
                e.preventDefault();
                return;
            }

            if (imageInput.files.length > 5) {
                showImageError('Maximum 5 images allowed');
                e.preventDefault();
                return;
            }

            // Validate file types and sizes again before submission
            let hasErrors = false;
            Array.from(imageInput.files).forEach(file => {
                const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                const maxSize = 5 * 1024 * 1024;

                if (!validTypes.includes(file.type)) {
                    showImageError(`${file.name} is not a valid image type`);
                    hasErrors = true;
                }

                if (file.size > maxSize) {
                    showImageError(`${file.name} exceeds maximum size of 5MB`);
                    hasErrors = true;
                }
            });

            if (hasErrors) {
                e.preventDefault();
            }
        });
    });
  </script>

  <!-- Add this script after your existing scripts -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const nameInput = form.elements.name;
        const quantityInput = form.elements.quantity;
        const priceInput = form.elements.price;
        const discountInput = form.elements.discount;
        const descriptionInput = form.elements.description;
        const categorySelect = form.elements.category;

        // Real-time validation for name
        nameInput.addEventListener('input', function() {
            const value = this.value.trim();
            if (value.length < 3) {
                showInputError(this, 'Product name must be at least 3 characters long');
            } else if (value.length > 100) {
                showInputError(this, 'Product name cannot exceed 100 characters');
            } else {
                clearInputError(this);
            }
        });

        // Real-time validation for quantity
        quantityInput.addEventListener('input', function() {
            const value = parseInt(this.value);
            if (isNaN(value)) {
                showInputError(this, 'Please enter a valid number');
            } else if (value < 0) {
                this.value = 0;
                showInputError(this, 'Quantity cannot be negative');
            } else if (value > 10000) {
                showInputError(this, 'Quantity cannot exceed 10,000 units');
            } else {
                clearInputError(this);
            }
        });

        // Real-time validation for price
        priceInput.addEventListener('input', function() {
            const value = parseFloat(this.value);
            if (isNaN(value)) {
                showInputError(this, 'Please enter a valid price');
            } else if (value < 0) {
                this.value = 0;
                showInputError(this, 'Price cannot be negative');
            } else if (value < 1) {
                showInputError(this, 'Price must be at least ₹1');
            } else if (value > 1000000) {
                showInputError(this, 'Price cannot exceed ₹10,00,000');
            } else {
                clearInputError(this);
                updateSalePrice();
            }
        });

        // Real-time validation for discount
        discountInput.addEventListener('input', function() {
            const value = parseFloat(this.value);
            if (isNaN(value)) {
                showInputError(this, 'Please enter a valid discount percentage');
            } else if (value < 0) {
                this.value = 0;
                showInputError(this, 'Discount cannot be negative');
            } else if (value > 91) {
                showInputError(this, 'Discount cannot exceed 90%');
            } else {
                clearInputError(this);
                updateSalePrice();
            }
        });

        // Real-time validation for description
        descriptionInput.addEventListener('input', function() {
            const value = this.value.trim();
            if (value.length < 10) {
                showInputError(this, 'Description must be at least 10 characters long');
            } else if (value.length > 1000) {
                showInputError(this, 'Description cannot exceed 1000 characters');
            } else {
                clearInputError(this);
            }
        });

        // Calculate and display sale price in real-time
        function updateSalePrice() {
            const price = parseFloat(priceInput.value) || 0;
            const discount = parseFloat(discountInput.value) || 0;
            const salePrice = price - (price * (discount / 100));
            
            // Display sale price somewhere on the form
            const salePriceDisplay = document.getElementById('salePriceDisplay') || createSalePriceDisplay();
            salePriceDisplay.textContent = `Sale Price: ₹${salePrice.toFixed(2)}`;
            
            // Add visual feedback
            if (salePrice < price) {
                salePriceDisplay.classList.add('text-green-500');
            } else {
                salePriceDisplay.classList.remove('text-green-500');
            }
        }

        function createSalePriceDisplay() {
            const div = document.createElement('div');
            div.id = 'salePriceDisplay';
            div.className = 'text-lg font-semibold mt-2';
            priceInput.parentElement.appendChild(div);
            return div;
        }

        // Form submission validation
        form.addEventListener('submit', function(e) {
            let hasError = false;

            // Clear all previous errors
            clearAllErrors();

            // Validate name
            if (!nameInput.value.trim()) {
                showInputError(nameInput, 'Product name is required');
                hasError = true;
            } else if (nameInput.value.trim().length < 3) {
                showInputError(nameInput, 'Product name must be at least 3 characters long');
                hasError = true;
            }

            // Validate quantity
            const quantity = parseInt(quantityInput.value);
            if (isNaN(quantity)) {
                showInputError(quantityInput, 'Valid quantity is required');
                hasError = true;
            } else if (quantity < 0) {
                showInputError(quantityInput, 'Quantity cannot be negative');
                hasError = true;
            }

            // Validate price
            const price = parseFloat(priceInput.value);
            if (isNaN(price)) {
                showInputError(priceInput, 'Valid price is required');
                hasError = true;
            } else if (price < 1) {
                showInputError(priceInput, 'Price must be at least ₹1');
                hasError = true;
            }

            // Validate discount
            const discount = parseFloat(discountInput.value);
            if (!isNaN(discount)) {  // Discount is optional
                if (discount < 0) {
                    showInputError(discountInput, 'Discount cannot be negative');
                    hasError = true;
                } else if (discount > 91) {
                    showInputError(discountInput, 'Discount cannot exceed 90%');
                    hasError = true;
                }
            }

            // Validate description
            if (!descriptionInput.value.trim()) {
                showInputError(descriptionInput, 'Product description is required');
                hasError = true;
            } else if (descriptionInput.value.trim().length < 10) {
                showInputError(descriptionInput, 'Description must be at least 10 characters long');
                hasError = true;
            }

            // Validate category
            if (!categorySelect.value) {
                showInputError(categorySelect, 'Please select a category');
                hasError = true;
            }

            // Validate images
            if (!document.querySelector('.selected-image') && !images.files.length) {
                showInputError(images, 'At least one product image is required');
                hasError = true;
            }

            if (hasError) {
                e.preventDefault();
                // Scroll to the first error
                const firstError = document.querySelector('.text-red-500');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        });

        function showInputError(input, message) {
            clearInputError(input);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-500 text-sm mt-1';
            errorDiv.textContent = message;
            input.classList.add('border-red-500');
            input.parentElement.appendChild(errorDiv);
        }

        function clearInputError(input) {
            const errorDiv = input.parentElement.querySelector('.text-red-500');
            if (errorDiv) {
                errorDiv.remove();
            }
            input.classList.remove('border-red-500');
        }

        function clearAllErrors() {
            document.querySelectorAll('.text-red-500').forEach(error => error.remove());
            document.querySelectorAll('.border-red-500').forEach(input => input.classList.remove('border-red-500'));
        }

        // Initialize sale price display
        updateSalePrice();
    });
  </script>

  <script>
  function toggleUnitFields(unitType) {
      const unitQuantityInput = document.getElementById('unitQuantity');
      const unitText = document.getElementById('unitText');
      const unitHelperText = document.getElementById('unitHelperText');
      const unitQuantityLabel = document.getElementById('unitQuantityLabel');

      if (unitType === 'kg') {
          unitQuantityInput.step = '0.01';
          unitQuantityInput.min = '0.01';
          unitText.textContent = 'KG';
          unitHelperText.textContent = 'For kg: Enter in kilograms (e.g., 0.25 for 250g)';
          unitQuantityLabel.textContent = 'Weight per Unit';
      } else if (unitType === 'nos') {
          unitQuantityInput.step = '1';
          unitQuantityInput.min = '1';
          unitText.textContent = 'PCS';
          unitHelperText.textContent = 'For numbers: Enter pieces per unit (e.g., 12 for a dozen)';
          unitQuantityLabel.textContent = 'Pieces per Unit';
      }
  }

  // Add validation for unit fields
  document.querySelector('form').addEventListener('submit', function(e) {
      const unit = document.querySelector('select[name="unit"]').value;
      const unitQuantity = document.querySelector('input[name="unitQuantity"]').value;

      if (!unit) {
          showInputError(document.querySelector('select[name="unit"]'), 'Please select a unit type');
          e.preventDefault();
          return;
      }

      if (!unitQuantity) {
          showInputError(document.querySelector('input[name="unitQuantity"]'), 'Please enter unit quantity');
          e.preventDefault();
          return;
      }

      const quantity = parseFloat(unitQuantity);
      if (unit === 'kg' && (quantity < 0.01 || quantity > 25)) {
          showInputError(document.querySelector('input[name="unitQuantity"]'), 'Weight per unit must be between 0.01 and 25 kg');
          e.preventDefault();
          return;
      }

      if (unit === 'nos' && (quantity < 1 || quantity > 100)) {
          showInputError(document.querySelector('input[name="unitQuantity"]'), 'Pieces per unit must be between 1 and 100');
          e.preventDefault();
          return;
      }
  });
  </script>

  <!-- Add this script section after your existing scripts -->
  <script>
    function validateForm() {
        clearAllErrors(); // Clear any existing errors
        let isValid = true;

        // Get all form fields
        const name = document.querySelector('input[name="name"]');
        const description = document.querySelector('textarea[name="description"]');
        const price = document.querySelector('input[name="price"]');
        const quantity = document.querySelector('input[name="quantity"]');
        const category = document.querySelector('select[name="category"]');
        const unit = document.querySelector('select[name="unit"]');
        const unitQuantity = document.querySelector('input[name="unitQuantity"]');
        const images = document.querySelector('input[name="images"]');

        // Validate unit type
        if (!unit.value) {
            showInputError(unit, 'Please select a unit type');
            isValid = false;
        }

        // Validate unit quantity based on unit type
        if (!unitQuantity.value) {
            showInputError(unitQuantity, 'Please enter unit quantity');
            isValid = false;
        } else {
            const qty = parseFloat(unitQuantity.value);
            if (unit.value === 'kg') {
                if (qty < 0.01 || qty > 25) {
                    showInputError(unitQuantity, 'Weight per unit must be between 0.01 and 25 kg');
                    isValid = false;
                }
            } else if (unit.value === 'nos') {
                if (!Number.isInteger(qty) || qty < 1 || qty > 100) {
                    showInputError(unitQuantity, 'Pieces per unit must be between 1 and 100');
                    isValid = false;
                }
            }
        }

        // Validate quantity (stock)
        if (!quantity.value) {
            showInputError(quantity, 'Please enter stock quantity');
            isValid = false;
        } else {
            const qty = parseInt(quantity.value);
            if (qty < 0) {
                showInputError(quantity, 'Stock quantity cannot be negative');
                isValid = false;
            }
            if (!Number.isInteger(qty)) {
                showInputError(quantity, 'Stock quantity must be a whole number');
                isValid = false;
            }
        }

        // Add to existing validation
        if (!name.value.trim()) {
            showInputError(name, 'Product name is required');
            isValid = false;
        }

        if (!description.value.trim()) {
            showInputError(description, 'Description is required');
            isValid = false;
        }

        if (!price.value || parseFloat(price.value) <= 0) {
            showInputError(price, 'Please enter a valid price');
            isValid = false;
        }

        if (!category.value) {
            showInputError(category, 'Please select a category');
            isValid = false;
        }

        // Image validation for new products
        if (!document.querySelector('.selected-image') && !images.files.length) {
            showInputError(images, 'At least one product image is required');
            isValid = false;
        }

        return isValid;
    }

    // Add event listeners for real-time validation
    document.querySelector('select[name="unit"]').addEventListener('change', function() {
        const unitQuantityInput = document.querySelector('input[name="unitQuantity"]');
        clearInputError(unitQuantityInput);
        
        if (this.value === 'kg') {
            unitQuantityInput.setAttribute('step', '0.01');
            unitQuantityInput.setAttribute('min', '0.01');
            unitQuantityInput.setAttribute('max', '25');
        } else if (this.value === 'nos') {
            unitQuantityInput.setAttribute('step', '1');
            unitQuantityInput.setAttribute('min', '1');
            unitQuantityInput.setAttribute('max', '100');
        }
    });

    document.querySelector('input[name="unitQuantity"]').addEventListener('input', function() {
        clearInputError(this);
        const unit = document.querySelector('select[name="unit"]').value;
        const value = parseFloat(this.value);

        if (unit === 'kg') {
            if (value < 0.01 || value > 25) {
                showInputError(this, 'Weight must be between 0.01 and 25 kg');
            }
        } else if (unit === 'nos') {
            if (!Number.isInteger(value) || value < 1 || value > 100) {
                showInputError(this, 'Pieces must be between 1 and 100');
            }
        }
    });

    // Add form submit handler
    document.querySelector('form').addEventListener('submit', function(e) {
        if (!validateForm()) {
            e.preventDefault();
        }
    });
  </script>

  <script>
        // Product Validation Rules
        const validationRules = {
            name: {
                min: 3,
                max: 100,
                pattern: /^[a-zA-Z0-9\s-&()]+$/,
                message: {
                    required: 'Product name is required',
                    min: 'Product name must be at least 3 characters',
                    max: 'Product name cannot exceed 100 characters',
                    pattern: 'Product name can only contain letters, numbers, spaces, and basic punctuation'
                }
            },
            description: {
                min: 20,
                max: 1000,
                message: {
                    required: 'Product description is required',
                    min: 'Description must be at least 20 characters',
                    max: 'Description cannot exceed 1000 characters'
                }
            },
            price: {
                min: 1,
                max: 1000000,
                pattern: /^\d+(\.\d{1,2})?$/,
                message: {
                    required: 'Price is required',
                    min: 'Price must be at least ₹1',
                    max: 'Price cannot exceed ₹10,00,000',
                    pattern: 'Price must be a valid number with up to 2 decimal places'
                }
            },
            quantity: {
                min: 0,
                max: 10000,
                pattern: /^\d+$/,
                message: {
                    required: 'Stock quantity is required',
                    min: 'Stock quantity cannot be negative',
                    max: 'Stock quantity cannot exceed 10,000 units',
                    pattern: 'Stock quantity must be a whole number'
                }
            },
            discount: {
                min: 0,
                max: 90,
                pattern: /^\d+(\.\d{1,2})?$/,
                message: {
                    min: 'Discount cannot be negative',
                    max: 'Discount cannot exceed 90%',
                    pattern: 'Discount must be a valid number with up to 2 decimal places'
                }
            },
            unit: {
                message: {
                    required: 'Please select a unit type'
                }
            },
            unitQuantity: {
                kg: {
                    min: 0.01,
                    max: 25,
                    pattern: /^\d+(\.\d{1,3})?$/,
                    message: {
                        required: 'Weight per unit is required',
                        min: 'Weight must be at least 0.01 kg',
                        max: 'Weight cannot exceed 25 kg',
                        pattern: 'Weight must be a valid number with up to 3 decimal places'
                    }
                },
                nos: {
                    min: 1,
                    max: 100,
                    pattern: /^\d+$/,
                    message: {
                        required: 'Pieces per unit is required',
                        min: 'Pieces must be at least 1',
                        max: 'Pieces cannot exceed 100',
                        pattern: 'Pieces must be a whole number'
                    }
                }
            },
            category: {
                message: {
                    required: 'Please select a category'
                }
            },
            images: {
                min: 1,
                max: 5,
                types: ['image/jpeg', 'image/png', 'image/jpg'],
                maxSize: 5 * 1024 * 1024, // 5MB
                message: {
                    required: 'At least one product image is required',
                    max: 'Maximum 5 images allowed',
                    type: 'Only JPG, JPEG, and PNG images are allowed',
                    size: 'Image size cannot exceed 5MB'
                }
            }
        };

        // Validation Functions
        function validateField(field, value, type = null) {
            const rules = validationRules[field];
            let errors = [];

            // Skip validation if field is optional and empty
            if (value === '' && field === 'discount') return errors;

            // Required validation
            if (!value && rules.message.required) {
                errors.push(rules.message.required);
                return errors;
            }

            // Type-specific validation for unitQuantity
            if (field === 'unitQuantity' && type) {
                const typeRules = rules[type];
                if (value < typeRules.min) errors.push(typeRules.message.min);
                if (value > typeRules.max) errors.push(typeRules.message.max);
                if (!typeRules.pattern.test(value)) errors.push(typeRules.message.pattern);
                return errors;
            }

            // Standard validations
            if (rules.min && value.length < rules.min) errors.push(rules.message.min);
            if (rules.max && value.length > rules.max) errors.push(rules.message.max);
            if (rules.pattern && !rules.pattern.test(value)) errors.push(rules.message.pattern);

            // Numeric validations
            if (['price', 'quantity', 'discount'].includes(field)) {
                const num = parseFloat(value);
                if (rules.min && num < rules.min) errors.push(rules.message.min);
                if (rules.max && num > rules.max) errors.push(rules.message.max);
            }

            return errors;
        }

        function showError(input, message) {
            clearError(input);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-500 text-sm mt-1';
            errorDiv.textContent = message;
            input.classList.add('border-red-500');
            input.parentElement.appendChild(errorDiv);
        }

        function clearError(input) {
            const errorDiv = input.parentElement.querySelector('.text-red-500');
            if (errorDiv) errorDiv.remove();
            input.classList.remove('border-red-500');
        }

        function clearAllErrors() {
            document.querySelectorAll('.text-red-500').forEach(error => error.remove());
            document.querySelectorAll('.border-red-500').forEach(input => 
                input.classList.remove('border-red-500')
            );
        }

        // Real-time validation
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const inputs = form.querySelectorAll('input, textarea, select');

            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    validateInput(this);
                    if (this.name === 'price' || this.name === 'discount') {
                        updateSalePrice();
                    }
                });

                input.addEventListener('blur', function() {
                    validateInput(this);
                });
            });

            // Special handling for unit type change
            const unitSelect = form.querySelector('select[name="unit"]');
            const unitQuantityInput = form.querySelector('input[name="unitQuantity"]');

            unitSelect.addEventListener('change', function() {
                const unitType = this.value;
                updateUnitQuantityValidation(unitType, unitQuantityInput);
                validateInput(unitQuantityInput);
            });

            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                if (validateForm()) {
                    const loadingOverlay = document.getElementById('loadingOverlay');
                    if (loadingOverlay) {
                        loadingOverlay.classList.remove('hidden');
                        loadingOverlay.classList.add('flex');
                    }
                    this.submit();
                }
            });
        });

        function validateInput(input) {
            clearError(input);
            let errors = [];

            if (input.name === 'unitQuantity') {
                const unitType = document.querySelector('select[name="unit"]').value;
                errors = validateField('unitQuantity', input.value, unitType);
            } else {
                errors = validateField(input.name, input.value);
            }

            if (errors.length > 0) {
                showError(input, errors[0]);
                return false;
            }
            return true;
        }

        function updateUnitQuantityValidation(unitType, input) {
            if (unitType === 'kg') {
                input.setAttribute('step', '0.001');
                input.setAttribute('min', '0.01');
                input.setAttribute('max', '25');
            } else if (unitType === 'nos') {
                input.setAttribute('step', '1');
                input.setAttribute('min', '1');
                input.setAttribute('max', '100');
            }
        }

        function validateForm() {
            clearAllErrors();
            let isValid = true;
            const form = document.querySelector('form');
            const requiredFields = ['name', 'description', 'price', 'quantity', 'unit', 'unitQuantity', 'category'];

            requiredFields.forEach(field => {
                const input = form.querySelector(`[name="${field}"]`);
                if (!validateInput(input)) {
                    isValid = false;
                }
            });

            // Validate images
            const imageInput = document.getElementById('imageInput');
            const totalImages = imageInput.files.length;

            if (totalImages === 0) {
                showError(imageInput, validationRules.images.message.required);
                isValid = false;
            } else if (totalImages > validationRules.images.max) {
                showError(imageInput, validationRules.images.message.max);
                isValid = false;
            }

            // Validate each image
            for (let i = 0; i < imageInput.files.length; i++) {
                const file = imageInput.files[i];
                if (!validationRules.images.types.includes(file.type)) {
                    showError(imageInput, validationRules.images.message.type);
                    isValid = false;
                    break;
                }
                if (file.size > validationRules.images.maxSize) {
                    showError(imageInput, validationRules.images.message.size);
                    isValid = false;
                    break;
                }
            }

            return isValid;
        }

        function updateSalePrice() {
            const price = parseFloat(document.querySelector('input[name="price"]').value) || 0;
            const discount = parseFloat(document.querySelector('input[name="discount"]').value) || 0;
            const salePrice = price - (price * (discount / 100));
            
            const salePriceDisplay = document.getElementById('salePriceDisplay') || createSalePriceDisplay();
            salePriceDisplay.textContent = `Sale Price: ₹${salePrice.toFixed(2)}`;
            
            if (salePrice < price) {
                salePriceDisplay.classList.add('text-green-500');
            } else {
                salePriceDisplay.classList.remove('text-green-500');
            }
        }

        function createSalePriceDisplay() {
            const div = document.createElement('div');
            div.id = 'salePriceDisplay';
            div.className = 'text-lg font-semibold mt-2';
            document.querySelector('input[name="price"]').parentElement.appendChild(div);
            return div;
        }
    </script>
</body>

</html>