<!DOCTYPE html>
<html lang="en" class="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ecobazar - Edit Category</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --primary-dark: #1f2937;
      --secondary-dark: #111827;
      --accent-blue: #3b82f6;
      --text-primary: #e5e7eb;
      --text-secondary: #9ca3af;
    }

    body {
      background-color: var(--secondary-dark);
      color: var(--text-primary);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes glowPulse {
      0% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }

      50% {
        box-shadow: 0 0 15px rgba(59, 130, 246, 0.8);
      }

      100% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }
    }

    .fade-in-up {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    .form-container {
      background: var(--primary-dark);
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .form-container:hover {
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.4);
      border-color: rgba(59, 130, 246, 0.4);
    }

    .form-input {
      background: rgba(17, 24, 39, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: var(--text-primary);
    }

    .form-input:focus {
      background: rgba(17, 24, 39, 0.95);
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    .submit-button {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .submit-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
      background: linear-gradient(135deg, #2563eb, #1d4ed8);
    }

    .submit-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(120deg, transparent, rgba(255,255,255,0.3), transparent);
      transition: all 0.5s ease;
    }

    .submit-button:hover::before {
      left: 100%;
    }

    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #4b5563;
      transition: .4s;
      border-radius: 34px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked+.toggle-slider {
      background-color: var(--accent-blue);
    }

    input:checked+.toggle-slider:before {
      transform: translateX(26px);
    }

    .swal2-container {
      z-index: 10000 !important;
    }
    
    .image-error {
      color: #ef4444;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
  </style>
</head>

<body class="min-h-screen">
  <%- include('../layouts/head.ejs') %>

    <div class="flex">
      <%- include('../layouts/side.ejs') %>

        <div class="flex-1 ml-64 p-14">
          <div class="flex items-center justify-between mb-8 fade-in-up">
            <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 text-transparent bg-clip-text">Edit
              Category</h1>
          </div>

          <% if (errorMessage) { %>
            <div id="errorMessage"
              class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 fade-in-up" role="alert">
              <strong class="font-bold">Error!</strong>
              <%= errorMessage %>
            </div>
            <% } %>

              <% if (successMessage) { %>
                <div id="successMessage"
                  class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6 fade-in-up"
                  role="alert">
                  <strong class="font-bold">Success!</strong>
                  <%= successMessage %>
                </div>
                <% } %>

                  <form action="/admin/edit-category/<%= category._id %>" method="POST" enctype="multipart/form-data"
                    class="space-y-8">
                    <div class="form-container p-8 fade-in-up">
                      <div class="grid grid-cols-1 gap-8">
                        <!-- Category Name -->
                        <div class="space-y-2">
                          <label class="text-sm font-medium text-gray-400">Category Name</label>
                          <input type="text" name="name" value="<%= category.name %>"
                            class="form-input w-full px-4 py-3 rounded-lg" placeholder="Enter category name" required>
                        </div>

                        <!-- Description -->
                        <div class="space-y-2">
                          <label class="text-sm font-medium text-gray-400">Description</label>
                          <textarea name="description" rows="4"
                            class="form-input w-full px-4 py-3 rounded-lg resize-none"
                            placeholder="Enter category description" required><%= category.description %></textarea>
                        </div>

                        <!-- Category Image -->
                        <div class="space-y-2">
                          <label class="text-sm font-medium text-gray-400">Category Image</label>
                          <div class="image-upload-container">
                            <input type="file" id="imageInput" name="categoryImage" accept="image/*" class="hidden"
                              onchange="previewImage(event)">

                            <div id="uploadArea"
                              class="border-2 border-dashed border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-blue-500 transition-colors">
                              <div id="previewContainer" class="<%= (locals.formData && formData.categoryImage) || category.image ? '' : 'hidden' %>">
                                <% if (locals.formData && formData.categoryImage) { %>
                                  <img id="imagePreview" src="<%= formData.categoryImage %>" class="max-h-[300px] mx-auto">
                                <% } else { %>
                                  <img id="imagePreview" src="<%= category.image %>" class="max-h-[300px] mx-auto">
                                <% } %>
                              </div>
                              <div id="uploadPrompt" class="<%= (locals.formData && formData.categoryImage) || category.image ? 'hidden' : '' %>">
                                <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-2"></i>
                                <p class="text-gray-400">Click or drag image here to upload</p>
                              </div>
                            </div>
                          </div>
                        </div>

                        <!-- Status Toggle -->
                        <div class="flex items-center space-x-4">
                          <label class="toggle-switch">
                            <input type="checkbox" name="isActive" <%=category.isListed ? 'checked' : '' %>>
                            <span class="toggle-slider"></span>
                          </label>
                          <span class="text-sm font-medium text-gray-400">Active Status</span>
                        </div>

                        <!-- Submit Button -->
                        <div>
                          <button type="submit" 
                            class="submit-button w-full px-6 py-4 text-white rounded-lg shadow-lg font-medium hover:shadow-xl transition-all duration-300">
                            Update Category
                          </button>
                        </div>
                      </div>
                    </div>
                  </form>

        </div>
    </div>
    <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-gray-800 p-4 rounded-lg max-w-2xl w-full">
        <div class="mb-4">
          <h3 class="text-xl font-semibold text-white">Crop Image</h3>
        </div>
        <div class="relative h-96">
          <img id="cropperImage" class="max-h-full mx-auto">
        </div>
        <div class="mt-4 flex justify-end space-x-2">
          <button type="button" onclick="cancelCrop()"
            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
            Cancel
          </button>
          <button type="button" onclick="cropImage()"
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
            Crop & Save
          </button>
        </div>
      </div>
    </div>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.querySelector('form');
        const nameInput = document.querySelector('input[name="name"]');
        const descriptionInput = document.querySelector('textarea[name="description"]');
        const uploadArea = document.getElementById('uploadArea');
        const imageInput = document.getElementById('imageInput');
        const previewContainer = document.getElementById('previewContainer');
        const uploadPrompt = document.getElementById('uploadPrompt');
        const imagePreview = document.getElementById('imagePreview');

        // Form validation functions
        const validateName = () => {
          const value = nameInput.value.trim();
          
          if (!value) {
            showError(nameError, 'Category name is required');
            return false;
          }
          
          if (value.length < 3) {
            showError(nameError, 'Category name must be at least 3 characters');
            return false;
          }
          
          if (value.length > 50) {
            showError(nameError, 'Category name cannot exceed 50 characters');
            return false;
          }
          
          if (!/^[a-zA-Z0-9\s-]+$/.test(value)) {
            showError(nameError, 'Only letters, numbers, spaces and hyphens are allowed');
            return false;
          }

          hideError(nameError);
          return true;
        };

        const validateDescription = () => {
          const value = descriptionInput.value.trim();
          
          if (!value) {
            showError(descriptionError, 'Description is required');
            return false;
          }
          
          if (value.length < 10) {
            showError(descriptionError, 'Description must be at least 10 characters');
            return false;
          }
          
          if (value.length > 500) {
            showError(descriptionError, 'Description cannot exceed 500 characters');
            return false;
          }

          hideError(descriptionError);
          return true;
        };

        const validateOffer = () => {
          const offerInput = document.querySelector('input[name="offer"]');
          if (!offerInput) return true; // If offer field doesn't exist, skip validation
          
          const value = offerInput.value.trim();
          if (value === '') return true; // Empty offer is valid (will default to 0)
          
          const offerValue = parseInt(value);
          if (isNaN(offerValue)) {
            showError(offerError, 'Offer must be a valid number');
            return false;
          }
          
          if (offerValue < 0) {
            showError(offerError, 'Offer cannot be negative');
            return false;
          }
          
          if (offerValue > 90) {
            showError(offerError, 'Offer cannot exceed 90%');
            return false;
          }

          hideError(offerError);
          return true;
        };

        const validateImage = () => {
          const imageInput = document.getElementById('imageInput');
          const existingImage = document.getElementById('imagePreview').src;
          
          // If there's no new image but there's an existing image, that's valid
          if (!imageInput.files.length && existingImage && !existingImage.includes('undefined')) {
            hideError(imageError);
            return true;
          }
          
          // If there's a new image, validate it
          if (imageInput.files.length) {
            const file = imageInput.files[0];
            const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
            const maxSize = 5 * 1024 * 1024; // 5MB
            
            if (!validTypes.includes(file.type)) {
              showError(imageError, 'Only JPG, PNG and WebP images are allowed');
              return false;
            }
            
            if (file.size > maxSize) {
              showError(imageError, 'Image size should not exceed 5MB');
              return false;
            }
            
            hideError(imageError);
            return true;
          }
          
          showError(imageError, 'Please select an image');
          return false;
        };

        // Helper functions for showing/hiding errors with animation
        const showError = (element, message) => {
          element.textContent = message;
          element.style.display = 'block';
          element.style.animation = 'fadeIn 0.3s ease-in-out';
          element.classList.remove('opacity-0');
          element.classList.add('opacity-100', 'text-red-500');
          
          // Add shake animation to the input
          const inputElement = element.previousElementSibling;
          if (inputElement) {
            inputElement.classList.add('border-red-500');
            inputElement.classList.add('animate-shake');
            setTimeout(() => {
              inputElement.classList.remove('animate-shake');
            }, 500);
          }
        };

        const hideError = (element) => {
          element.style.animation = 'fadeOut 0.3s ease-in-out';
          setTimeout(() => {
            element.style.display = 'none';
            element.classList.remove('opacity-100');
            element.classList.add('opacity-0');
          }, 300);
          
          // Remove red border from input
          const inputElement = element.previousElementSibling;
          if (inputElement) {
            inputElement.classList.remove('border-red-500');
          }
        };

        // Add real-time validation
        nameInput.addEventListener('input', validateName);
        descriptionInput.addEventListener('input', validateDescription);
        if (document.querySelector('input[name="offer"]')) {
          document.querySelector('input[name="offer"]').addEventListener('input', validateOffer);
        }

        // Create error elements
        const nameError = document.createElement('div');
        nameError.className = 'error-message mt-1 text-sm opacity-0 transition-opacity duration-300';
        nameInput.parentNode.appendChild(nameError);

        const descriptionError = document.createElement('div');
        descriptionError.className = 'error-message mt-1 text-sm opacity-0 transition-opacity duration-300';
        descriptionInput.parentNode.appendChild(descriptionError);

        const offerError = document.createElement('div');
        offerError.className = 'error-message mt-1 text-sm opacity-0 transition-opacity duration-300';
        if (document.querySelector('input[name="offer"]')) {
          document.querySelector('input[name="offer"]').parentNode.appendChild(offerError);
        }

        const imageError = document.createElement('div');
        imageError.className = 'error-message mt-1 text-sm opacity-0 transition-opacity duration-300';
        document.querySelector('.image-upload-container').appendChild(imageError);

        // Add keypress validation for offer input to allow only numbers
        if (document.querySelector('input[name="offer"]')) {
          document.querySelector('input[name="offer"]').addEventListener('keypress', (e) => {
            if (!/[\d.]/.test(e.key)) {
              e.preventDefault();
            }
          });
        }

        // Form submission with validation
        form.addEventListener('submit', function(e) {
          e.preventDefault();

          const isNameValid = validateName();
          const isDescriptionValid = validateDescription();
          const isOfferValid = validateOffer();
          const isImageValid = validateImage();

          if (!isNameValid || !isDescriptionValid || !isOfferValid || !isImageValid) {
            // Find first error and scroll to it
            const firstError = form.querySelector('.error-message:not(.opacity-0)');
            if (firstError) {
              firstError.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center'
              });
            }
            return;
          }

          // If all validations pass, submit the form
          this.submit();
        });

        // Add styles for animations
        const style = document.createElement('style');
        style.textContent = `
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
          }
          
          @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
          }
          
          @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
          }
          
          .animate-shake {
            animation: shake 0.5s ease-in-out;
          }
          
          .error-message {
            color: #ef4444;
            margin-top: 0.25rem;
          }
        `;
        document.head.appendChild(style);

        // File upload handling
        uploadArea.addEventListener('click', () => {
          imageInput.click();
        });

        uploadArea.addEventListener('dragover', (e) => {
          e.preventDefault();
          uploadArea.classList.add('border-blue-500');
        });

        uploadArea.addEventListener('dragleave', () => {
          uploadArea.classList.remove('border-blue-500');
        });

        uploadArea.addEventListener('drop', (e) => {
          e.preventDefault();
          uploadArea.classList.remove('border-blue-500');
          
          if (e.dataTransfer.files.length) {
            imageInput.files = e.dataTransfer.files;
            previewImage({ target: imageInput });
          }
        });

        window.previewImage = (event) => {
          const file = event.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
              // Show the crop modal instead of direct preview
              const cropModal = document.getElementById('cropModal');
              const cropperImage = document.getElementById('cropperImage');
              cropperImage.src = e.target.result;
              cropModal.classList.remove('hidden');
              cropModal.classList.add('flex');
              
              // Initialize cropper
              if (window.cropper) {
                window.cropper.destroy();
              }
              window.cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                dragMode: 'move',
                autoCropArea: 1,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
              });
            };
            reader.readAsDataURL(file);
          }
        };

        // Add crop functionality
        window.cropImage = () => {
          const canvas = window.cropper.getCroppedCanvas({
            width: 600,
            height: 600,
          });
          
          const croppedImageUrl = canvas.toDataURL('image/jpeg');
          
          // Update preview
          const imagePreview = document.getElementById('imagePreview');
          const previewContainer = document.getElementById('previewContainer');
          const uploadPrompt = document.getElementById('uploadPrompt');
          
          imagePreview.src = croppedImageUrl;
          previewContainer.classList.remove('hidden');
          uploadPrompt.classList.add('hidden');
          
          // Close modal
          const cropModal = document.getElementById('cropModal');
          cropModal.classList.add('hidden');
          cropModal.classList.remove('flex');
          
          // Convert base64 to blob and create a new file
          fetch(croppedImageUrl)
            .then(res => res.blob())
            .then(blob => {
              const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
              
              // Create a new FileList containing the cropped image
              const dataTransfer = new DataTransfer();
              dataTransfer.items.add(file);
              document.getElementById('imageInput').files = dataTransfer.files;
            });
          
          // Destroy cropper instance
          window.cropper.destroy();
        };

        // Add cancel crop functionality
        window.cancelCrop = () => {
          const cropModal = document.getElementById('cropModal');
          cropModal.classList.add('hidden');
          cropModal.classList.remove('flex');
          
          // Clear the file input
          document.getElementById('imageInput').value = '';
          
          // Destroy cropper instance
          if (window.cropper) {
            window.cropper.destroy();
          }
        };
      });
    </script>
</body>

</html>