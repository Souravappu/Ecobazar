<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Ecobazar</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .nav-item {
            transition: all 0.3s ease;
        }
        .nav-item:hover {
            transform: translateX(10px);
            background-color: rgba(16, 185, 129, 0.1);
        }
        .nav-item.active {
            background: linear-gradient(to right, #10b981, #059669);
            color: white;
            box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
        }
        .card {
            transition: all 0.4s ease;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
        }
        main {
            flex-grow: 1;
            padding-top: 2rem;
            padding-bottom: 2rem;
        }
        .status-badge {
            @apply px-3 py-1 rounded-full text-sm font-medium;
        }
        
        .status-pending {
            @apply bg-yellow-100 text-yellow-700;
        }
        
        .status-approved {
            @apply bg-green-100 text-green-700;
        }
        
        .status-rejected {
            @apply bg-red-100 text-red-700;
        }
        
        .status-none {
            @apply bg-gray-100 text-gray-700;
        }
        .status-returned {
            @apply bg-purple-100 text-purple-700;
        }
    </style>
</head>
<body>
    <%- include('../layouts/headerWithoutUser.ejs') %>

    <main class="container mx-auto grid grid-cols-12 gap-6 animate__animated animate__fadeIn p-6">
        <!-- Navigation Sidebar -->
        <%- include('../layouts/profileSidebar.ejs', { currentPage: 'order-details ' }) %>
        </div>

        <!-- Order Details Content -->
        <div class="col-span-9 space-y-6">
            <div class="card bg-white rounded-2xl shadow-2xl p-8">
                <!-- Header with Back Button -->
                <div class="flex items-center justify-between mb-6 border-b pb-4">
                    <div>
                        <a href="/orders" class="text-gray-600 hover:text-gray-800 mb-2 inline-flex items-center">
                            <i class="fas fa-arrow-left mr-2"></i>
                            Back to Orders
                        </a>
                        <h2 class="text-2xl font-bold">Order #<%= order.orderId %></h2>
                        <div class="mt-2">
                            <a href="/order/<%= order._id %>/invoice" 
                               class="text-green-600 hover:text-green-700 inline-flex items-center">
                                <i class="fas fa-download mr-2"></i>
                                Download Invoice
                            </a>
                        </div>
                    </div>
                    <div class="flex items-center">
                        <span class="px-4 py-2 rounded-full text-sm font-medium
                            <%= order.orderStatus === 'Delivered' ? 'bg-green-100 text-green-700' :
                                order.orderStatus === 'Cancelled' ? 'bg-red-100 text-red-700' :
                                'bg-blue-100 text-blue-700' %>">
                            <%= order.orderStatus %>
                        </span>
                        <% if (order.orderStatus === 'Cancelled') { %>
                            <button onclick="showCancelReason(`<%= order.cancelReason %>`)"
                                    class="ml-2 text-gray-500 hover:text-gray-700">
                                <i class="fas fa-info-circle"></i>
                            </button>
                        <% } %>
                    </div>
                </div>

                <% if (order.orderStatus === 'Cancelled') { %>
                    <div class="bg-red-50 border border-red-100 rounded-lg p-4 mb-6">
                        <h3 class="text-red-700 font-medium mb-2">Cancellation Details</h3>
                        <p class="text-red-600"><%= order.cancelReason ? order.cancelReason : 'No reason provided' %></p>
                        <p class="text-red-500 text-sm mt-2">
                            Cancelled on: <%= order.cancelledAt ? new Date(order.cancelledAt).toLocaleString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            }) : 'Date not available' %>
                        </p>
                    </div>
                <% } %>
                <% if (!['Delivered', 'Cancelled', 'Returned'].includes(order.orderStatus) && 
                       !(order.returnRequested && ['Approved', 'Pending'].includes(order.returnStatus))) { %>
                    <button onclick="cancelOrder('<%= order._id %>')"
                            class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors">
                        Cancel Order
                    </button>
                <% } %>

                <!-- Order Information -->
                <div class="grid grid-cols-2 gap-8 mb-8">
                    <div>
                        <h3 class="text-lg font-semibold mb-3">Order Information</h3>
                        <div class="space-y-2 text-gray-600">
                            <p>Placed on: <%= new Date(order.createdAt).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            }) %></p>
                            <p>Payment Method: <%= order.paymentMethod %></p>
                        </div>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-3">Shipping Address</h3>
                        <div class="space-y-2 text-gray-600">
                            <p class="font-medium"><%= order.shippingAddress.name %></p>
                            <p><%= order.shippingAddress.streetAddress %></p>
                            <% if (order.shippingAddress.apartment) { %>
                                <p><%= order.shippingAddress.apartment %></p>
                            <% } %>
                            <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.postalCode %></p>
                            <% if (order.shippingAddress.landMark) { %>
                                <p>Landmark: <%= order.shippingAddress.landMark %></p>
                            <% } %>
                            <p>Phone: <%= order.shippingAddress.phone %></p>
                        </div>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="card bg-white rounded-xl shadow-lg p-6 mb-6">
                    <h3 class="text-lg font-semibold mb-4">Order Items</h3>
                    <% order.items.forEach(item => { %>
                        <div class="flex items-center justify-between border-b py-4 last:border-0">
                            <!-- Product Details -->
                            <div class="flex items-center space-x-4 flex-1">
                                <img src="/uploads/products/<%= item.product.images[0].split('/').pop() %>"
                                     alt="<%= item.product.name %>"
                                     class="w-20 h-20 object-cover rounded-lg">
                                <div>
                                    <h4 class="font-medium text-gray-800"><%= item.product.name %></h4>
                                    <p class="text-sm text-gray-500">
                                        Qty: <%= item.quantity %> × ₹<%= item.price %>
                                    </p>
                                    <p class="font-medium text-gray-800 mt-1">
                                        Total: ₹<%= item.quantity * item.price %>
                                    </p>
                                </div>
                            </div>

                            <!-- Status and Actions -->
                            <div class="flex flex-col items-end space-y-2">
                                <div class="flex items-center">
                                    <span class="px-3 py-1 rounded-full text-sm font-medium
                                        <%= item.status === 'Delivered' ? 'bg-green-100 text-green-700' :
                                            item.status === 'Cancelled' ? 'bg-red-100 text-red-700' :
                                            'bg-blue-100 text-blue-700' %>">
                                        <%= item.status %>
                                    </span>
                                    <% if (item.status === 'Cancelled') { %>
                                        <button onclick="showCancelReason(`<%= item.cancelReason %>`)"
                                                class="ml-2 text-gray-500 hover:text-gray-700">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    <% } %>
                                </div>
                                <div class="flex flex-col items-end gap-2">
                                    <% if (!['Delivered', 'Cancelled', 'Returned'].includes(item.status) && 
                                           !(item.returnRequested && ['Approved', 'Pending'].includes(item.returnStatus))) { %>
                                        <button onclick="cancelOrderItem('<%= order._id %>', '<%= item._id %>')"
                                                class="text-red-600 hover:text-red-700 text-sm">
                                            Cancel Item
                                        </button>
                                    <% } %>
                                    
                                    <% if (item.status === 'Delivered' && !item.returnRequested) { %>
                                        <button onclick="requestItemReturn('<%= order._id %>', '<%= item._id %>')"
                                                class="text-blue-600 hover:text-blue-700 text-sm">
                                            Request Return
                                        </button>
                                    <% } else if (item.returnRequested) { %>
                                        <div class="flex items-center gap-2">
                                            <span class="px-3 py-1 rounded-full text-sm font-medium
                                                <%= item.returnStatus === 'Pending' ? 'bg-yellow-100 text-yellow-700' :
                                                    item.returnStatus === 'Approved' ? 'bg-green-100 text-green-700' :
                                                    'bg-red-100 text-red-700' %>">
                                                Return <%= item.returnStatus %>
                                            </span>
                                            <button onclick="showReturnReason(`<%= item.returnReason %>`)"
                                                    class="text-gray-500 hover:text-gray-700">
                                                <i class="fas fa-info-circle"></i>
                                            </button>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Order Summary -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Shipping Details -->
                    <div class="card bg-white rounded-xl shadow-lg p-6">
                        <h3 class="text-lg font-semibold mb-4">Shipping Details</h3>
                        <div class="space-y-2 text-gray-600">
                            <p class="font-medium"><%= order.shippingAddress.name %></p>
                            <p><%= order.shippingAddress.streetAddress %></p>
                            <% if (order.shippingAddress.apartment) { %>
                                <p><%= order.shippingAddress.apartment %></p>
                            <% } %>
                            <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.postalCode %></p>
                            <p>Phone: <%= order.shippingAddress.phone %></p>
                        </div>
                    </div>

                    <!-- Order Summary -->
                    <div class="card bg-white rounded-xl shadow-lg p-6">
                        <h3 class="text-lg font-semibold mb-4">Order Summary</h3>
                        <div class="space-y-3">
                            <div class="flex justify-between text-gray-600">
                                <span>Subtotal</span>
                                <span>₹<%= order.subtotal %></span>
                            </div>
                            <div class="flex justify-between text-gray-600">
                                <span>Shipping</span>
                                <span>₹<%= order.shippingCharge %></span>
                            </div>
                            <div class="flex justify-between font-semibold text-gray-800 pt-3 border-t">
                                <span>Total</span>
                                <span>₹<%= order.total %></span>
                            </div>
                        </div>
                    </div>
                </div>

                <% if (order.orderStatus === 'Delivered' && !order.returnRequested) { %>
                    <div class="mt-6 border-t pt-6">
                        <div class="flex justify-end">
                            <button onclick="requestOrderReturn('<%= order._id %>')"
                                    class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                                Request Full Order Return
                            </button>
                        </div>
                    </div>
                <% } else if (order.returnRequested) { %>
                    <div class="mt-6 border-t pt-6">
                        <div class="p-4 rounded-lg <%= 
                            order.returnStatus === 'Pending' ? 'bg-yellow-50 border border-yellow-200' :
                            order.returnStatus === 'Approved' ? 'bg-green-50 border border-green-200' :
                            'bg-red-50 border border-red-200' %>">
                            <div class="flex justify-between items-start">
                                <div>
                                    <h3 class="font-medium text-lg mb-2">Return Request Status</h3>
                                    <p class="text-sm text-gray-600"><%= order.returnReason %></p>
                                    <p class="text-xs text-gray-500 mt-2">
                                        Requested on: <%= new Date(order.returnRequestedAt).toLocaleString() %>
                                    </p>
                                </div>
                                <span class="px-4 py-2 rounded-full text-sm font-medium <%= 
                                    order.returnStatus === 'Pending' ? 'bg-yellow-100 text-yellow-700' :
                                    order.returnStatus === 'Approved' ? 'bg-green-100 text-green-700' :
                                    'bg-red-100 text-red-700' %>">
                                    <%= order.returnStatus %>
                                </span>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <%- include('../layouts/footer.ejs') %>

    <script>
    async function cancelOrder(orderId) {
        const { value: reason } = await Swal.fire({
            title: 'Cancel Order',
            input: 'textarea',
            inputLabel: 'Reason for cancellation',
            inputPlaceholder: 'Enter your reason for cancellation...',
            inputAttributes: {
                'aria-label': 'Reason for cancellation',
                'minlength': '10',
                'maxlength': '200'
            },
            showCancelButton: true,
            confirmButtonText: 'Cancel Order',
            confirmButtonColor: '#EF4444',
            cancelButtonText: 'Keep Order',
            inputValidator: (value) => {
                if (!value) {
                    return 'Please provide a reason for cancellation';
                }
                if (value.trim().length < 10) {
                    return 'Reason must be at least 10 characters long';
                }
                if (value.trim().length > 200) {
                    return 'Reason cannot exceed 200 characters';
                }
                if (!/^[a-zA-Z0-9\s.,!?-]+$/.test(value)) {
                    return 'Reason contains invalid characters';
                }
            },
            preConfirm: (value) => {
                return value.trim();
            }
        });

        if (reason) {
            try {
                const response = await fetch(`/order/${orderId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Cancelled',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error cancelling order'
                });
            }
        }
    }

    async function cancelOrderItem(orderId, itemId) {
        const { value: reason } = await Swal.fire({
            title: 'Cancel Item',
            input: 'textarea',
            inputLabel: 'Reason for cancellation',
            inputPlaceholder: 'Enter your reason for cancellation...',
            inputAttributes: {
                'aria-label': 'Reason for cancellation',
                'minlength': '10',
                'maxlength': '200'
            },
            showCancelButton: true,
            confirmButtonText: 'Cancel Item',
            confirmButtonColor: '#EF4444',
            cancelButtonText: 'Keep Item',
            inputValidator: (value) => {
                if (!value) {
                    return 'Please provide a reason for cancellation';
                }
                if (value.trim().length < 10) {
                    return 'Reason must be at least 10 characters long';
                }
                if (value.trim().length > 200) {
                    return 'Reason cannot exceed 200 characters';
                }
                if (!/^[a-zA-Z0-9\s.,!?-]+$/.test(value)) {
                    return 'Reason contains invalid characters';
                }
            },
            preConfirm: (value) => {
                return value.trim();
            }
        });

        if (reason) {
            try {
                const response = await fetch(`/order/${orderId}/item/${itemId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Item Cancelled',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error cancelling item'
                });
            }
        }
    }

    function showCancelReason(reason) {
        Swal.fire({
            title: 'Cancellation Reason',
            text: reason || 'No reason provided',
            icon: 'info',
            confirmButtonColor: '#10b981'
        });
    }

    async function requestItemReturn(orderId, itemId) {
        const { value: reason } = await Swal.fire({
            title: 'Request Item Return',
            input: 'textarea',
            inputLabel: 'Reason for return',
            inputPlaceholder: 'Enter your reason for return...',
            inputAttributes: {
                'aria-label': 'Reason for return',
                'minlength': '10',
                'maxlength': '200'
            },
            showCancelButton: true,
            confirmButtonColor: '#3B82F6',
            confirmButtonText: 'Submit Return Request',
            inputValidator: (value) => {
                if (!value) {
                    return 'Please provide a reason for return';
                }
                if (value.trim().length < 10) {
                    return 'Reason must be at least 10 characters long';
                }
                if (value.trim().length > 200) {
                    return 'Reason cannot exceed 200 characters';
                }
                if (!/^[a-zA-Z0-9\s.,!?-]+$/.test(value)) {
                    return 'Reason contains invalid characters';
                }
            },
            preConfirm: (value) => {
                return value.trim();
            }
        });

        if (reason) {
            try {
                const response = await fetch(`/order/${orderId}/item/${itemId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Requested',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error requesting return'
                });
            }
        }
    }

    async function requestOrderReturn(orderId) {
        const { value: reason } = await Swal.fire({
            title: 'Request Order Return',
            input: 'textarea',
            inputLabel: 'Reason for return',
            inputPlaceholder: 'Enter your reason for return...',
            inputAttributes: {
                'aria-label': 'Reason for return',
                'minlength': '10',
                'maxlength': '200'
            },
            showCancelButton: true,
            confirmButtonColor: '#3B82F6',
            confirmButtonText: 'Submit Return Request',
            inputValidator: (value) => {
                if (!value) {
                    return 'Please provide a reason for return';
                }
                if (value.trim().length < 10) {
                    return 'Reason must be at least 10 characters long';
                }
                if (value.trim().length > 200) {
                    return 'Reason cannot exceed 200 characters';
                }
                if (!/^[a-zA-Z0-9\s.,!?-]+$/.test(value)) {
                    return 'Reason contains invalid characters';
                }
            },
            preConfirm: (value) => {
                return value.trim();
            }
        });

        if (reason) {
            try {
                const response = await fetch(`/order/${orderId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Requested',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error requesting return'
                });
            }
        }
    }

    function showReturnReason(reason) {
        Swal.fire({
            title: 'Return Reason',
            text: reason || 'No reason provided',
            icon: 'info'
        });
    }
    </script>
</body>
</html> 