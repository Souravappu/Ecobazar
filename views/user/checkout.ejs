<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Ecobazar</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <style>
        .checkout-section {
            transition: all 0.3s ease;
        }
        .checkout-section:hover {
            transform: translateY(-2px);
        }
        .coupon-card {
            transition: all 0.3s ease;
        }
        .coupon-card:hover {
            transform: scale(1.02);
        }
        .payment-option {
            transition: all 0.3s ease;
        }
        .payment-option:hover {
            background-color: #f0fdf4;
        }
        @keyframes pulse-border {
            0% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(34, 197, 94, 0); }
            100% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0); }
        }
        .pulse-button {
            animation: pulse-border 2s infinite;
        }
        .shimmer {
            background: linear-gradient(90deg, #f0fdf4 25%, #dcfce7 50%, #f0fdf4 75%);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }
        @keyframes shimmer {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        /* Enhanced Input Styles */
        .form-input {
            height: 3rem;
            font-size: 1rem;
            padding-left: 2.5rem;
            padding-right: 1rem;
            width: 100%;
            transition: all 0.3s ease;
        }
        
        .form-input:focus {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(34, 197, 94, 0.1), 0 2px 4px -1px rgba(34, 197, 94, 0.06);
        }
        
        .form-checkbox, .form-radio {
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 0.375rem;
            transition: all 0.2s ease;
        }
        
        .form-checkbox:checked, .form-radio:checked {
            transform: scale(1.1);
        }
        
        .input-icon {
            font-size: 1.25rem;
            color: #22C55E;
        }
        
        .wallet-input {
            font-size: 1.125rem;
            font-weight: 500;
            padding-left: 2rem;
            width: 8rem;
        }
        
        /* Input group hover effect */
        .input-group {
            position: relative;
            transition: all 0.3s ease;
        }
        
        .input-group:hover .form-input {
            border-color: #22C55E;
        }
        
        .input-group:hover .input-icon {
            transform: scale(1.1);
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../layouts/headerWithoutUser.ejs') %>

    <!-- Breadcrumbs -->
    <div >
        <div class="container mx-auto px-4 py-3">
            <nav class="flex items-center text-sm">
                <a href="/" class="text-gray-500 hover:text-green-600 transition-colors duration-200">
                    <i class="fas fa-home mr-1"></i> Home
                </a>
                <span class="mx-2 text-gray-400">/</span>
                <a href="/cart" class="text-gray-500 hover:text-green-600 transition-colors duration-200">
                    <i class="fas fa-shopping-cart mr-1"></i> Shopping Cart
                </a>
                <span class="mx-2 text-gray-400">/</span>
                <span class="text-green-600">
                    <i class="fas fa-credit-card mr-1"></i> Checkout
                </span>
            </nav>
        </div>
    </div>

    <main class="container mx-auto px-4 sm:px-6 py-4 sm:py-8">
        <h1 class="text-2xl sm:text-3xl font-bold mb-4 sm:mb-8 flex items-center animate__animated animate__fadeIn">
            <i class="fas fa-shopping-bag mr-3 text-green-600"></i>
            Checkout
            <span class="ml-3 text-sm font-normal text-gray-500">(<%= cart.items.length %> items)</span>
        </h1>

        <form id="checkoutForm" class="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-8" onsubmit="handleSubmit(event)">
            <!-- Shipping Address Section -->
            <div class="lg:col-span-2 space-y-4 sm:space-y-6">
                <div class="checkout-section bg-white rounded-lg shadow-sm p-4 sm:p-6" data-aos="fade-up">
                    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4">
                        <h2 class="text-lg sm:text-xl font-semibold mb-2 sm:mb-0 flex items-center">
                            <i class="fas fa-map-marker-alt text-green-600 mr-2"></i>
                            Shipping Address
                        </h2>
                        <a href="/checkout/view-addresses" 
                           class="inline-flex items-center text-green-600 hover:text-green-700 text-sm sm:text-base transition-colors duration-200">
                            <i class="fas fa-address-book mr-2"></i>
                            Manage Addresses
                        </a>
                    </div>
                    
                    <% 
                    let defaultAddress = null;
                    if (addresses && addresses.length > 0) {
                        defaultAddress = addresses.find(addr => addr.isDefault);
                    }
                    %>
                    
                    <% if (defaultAddress) { %>
                        <div class="border rounded-lg p-3 sm:p-4 border-green-500 bg-green-50 hover:shadow-md transition-all duration-300">
                            <input type="hidden" name="addressId" value="<%= defaultAddress._id %>">
                            <div class="flex-1">
                                <div class="flex flex-wrap items-center gap-2 mb-2">
                                    <h3 class="font-medium"><%= defaultAddress.name %></h3>
                                    <span class="text-sm text-gray-500">(<%= defaultAddress.addressType %>)</span>
                                    <span class="text-xs bg-green-500 text-white px-2 py-1 rounded-full animate__animated animate__fadeIn">Default</span>
                                </div>
                                <div class="space-y-1 text-gray-600">
                                    <p class="text-sm sm:text-base flex items-center">
                                        <i class="fas fa-location-dot mr-2 text-green-500"></i>
                                        <%= defaultAddress.streetAddress %>
                                    </p>
                                    <% if (defaultAddress.apartment) { %>
                                        <p class="text-sm sm:text-base flex items-center">
                                            <i class="fas fa-building mr-2 text-green-500"></i>
                                            <%= defaultAddress.apartment %>
                                        </p>
                                    <% } %>
                                    <p class="text-sm sm:text-base flex items-center">
                                        <i class="fas fa-city mr-2 text-green-500"></i>
                                        <%= defaultAddress.city %>, <%= defaultAddress.postalCode %>
                                    </p>
                                    <% if (defaultAddress.landMark) { %>
                                        <p class="text-sm sm:text-base flex items-center">
                                            <i class="fas fa-landmark mr-2 text-green-500"></i>
                                            <%= defaultAddress.landMark %>
                                        </p>
                                    <% } %>
                                    <p class="text-sm sm:text-base flex items-center">
                                        <i class="fas fa-phone mr-2 text-green-500"></i>
                                        <%= defaultAddress.phone %>
                                    </p>
                                </div>
                            </div>
                        </div>
                    <% } else { %>
                        <div class="text-center py-6 sm:py-8">
                            <div class="animate__animated animate__fadeIn">
                                <i class="fas fa-home text-5xl text-gray-300 mb-4"></i>
                                <p class="text-gray-600 mb-4">No default shipping address set</p>
                                <a href="/checkout/view-addresses" 
                                   class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm sm:text-base transition-all duration-300 pulse-button">
                                    <i class="fas fa-plus mr-2"></i>
                                    Add Shipping Address
                                </a>
                            </div>
                        </div>
                    <% } %>
                </div>

                <!-- Apply Coupon Section -->
                <div class="checkout-section bg-white rounded-lg shadow-sm p-4 sm:p-6 mb-4" data-aos="fade-up" data-aos-delay="100">
                    <h2 class="text-lg sm:text-xl font-semibold mb-4 flex items-center">
                        <i class="fas fa-ticket-alt text-green-600 mr-2"></i>
                        Apply Coupon
                    </h2>
                    <div class="space-y-4">
                        <!-- Coupon Input Field -->
                        <div class="flex flex-col sm:flex-row gap-2">
                            <div class="relative flex-1 input-group">
                                <input type="text" 
                                       id="couponCode" 
                                       class="form-input rounded-lg border-gray-300 w-full pl-12 focus:border-green-500 focus:ring focus:ring-green-200 focus:ring-opacity-50"
                                       placeholder="Enter coupon code"
                                       <%= locals.appliedCoupon ? 'disabled' : '' %>>
                                <i class="fas fa-tag absolute left-4 top-1/2 transform -translate-y-1/2 input-icon transition-all duration-300"></i>
                            </div>
                            <div class="flex gap-2">
                                <button type="button" 
                                        id="applyCouponBtn"
                                        class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm sm:text-base w-full sm:w-auto transition-all duration-300 flex items-center justify-center"
                                        <%= locals.appliedCoupon ? 'disabled' : '' %>>
                                    <i class="fas fa-check mr-2"></i>
                                    Apply
                                </button>
                                <button type="button" 
                                        onclick="openCouponModal()"
                                        class="px-4 py-2 border border-green-600 text-green-600 rounded-lg hover:bg-green-50 text-sm sm:text-base w-full sm:w-auto transition-all duration-300 flex items-center justify-center shimmer">
                                    <i class="fas fa-gift mr-2"></i>
                                    View Coupons
                                </button>
                            </div>
                        </div>

                        <!-- Applied Coupon Info -->
                        <div id="appliedCouponInfo" class="hidden border rounded-lg p-3 sm:p-4 bg-green-50 animate__animated animate__fadeIn">
                            <div class="flex justify-between items-start">
                                <div>
                                    <div class="flex items-center space-x-2">
                                        <i class="fas fa-check-circle text-green-600"></i>
                                        <span class="text-green-600 font-medium">Applied Coupon:</span>
                                        <span id="appliedCouponCode" class="font-medium"></span>
                                    </div>
                                    <p id="appliedCouponDiscount" class="text-sm text-gray-600 mt-1"></p>
                                    <p id="discountAmount" class="text-sm text-green-600 mt-1"></p>
                                </div>
                                <button type="button" 
                                        onclick="removeCoupon()"
                                        class="text-red-600 hover:text-red-700 transition-colors duration-200">
                                    <i class="fas fa-times-circle text-lg"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payment Method Section -->
                <div class="checkout-section bg-white rounded-lg shadow-sm p-4 sm:p-6" data-aos="fade-up" data-aos-delay="200">
                    <h2 class="text-lg sm:text-xl font-semibold mb-4 flex items-center">
                        <i class="fas fa-wallet text-green-600 mr-2"></i>
                        Payment Method
                    </h2>
                    <div class="space-y-4">
                        <!-- Wallet Section -->
                        <div class="payment-option border rounded-lg p-3 sm:p-4 transition-all duration-300">
                            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
                                <div class="flex items-center space-x-4">
                                    <div class="relative">
                                        <input type="checkbox" 
                                               id="useWallet" 
                                               name="useWallet"
                                               class="form-checkbox text-green-500 rounded transition-all duration-200 focus:ring-green-500 focus:ring-offset-0"
                                               <%= walletBalance === 0 || cart.total > 10000 ? 'disabled' : '' %>>
                                        <div class="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate__animated animate__pulse animate__infinite" 
                                             style="<%= walletBalance === 0 || cart.total > 10000 ? 'display: none;' : '' %>"></div>
                                    </div>
                                    <div>
                                        <h3 class="font-medium text-sm sm:text-base flex items-center">
                                            <i class="fas fa-wallet text-green-500 mr-2"></i>
                                            Wallet Balance
                                        </h3>
                                        <p class="text-sm text-gray-500">Available: ₹<%= walletBalance %></p>
                                        <% if (cart.total > 10000) { %>
                                            <p class="text-xs text-red-500 flex items-center mt-1">
                                                <i class="fas fa-exclamation-circle mr-1"></i>
                                                Wallet cannot be used for orders above ₹10,000
                                            </p>
                                        <% } %>
                                    </div>
                                </div>
                                <div class="relative">
                                    <input type="number" 
                                           id="walletAmount"                                
                                           name="walletAmount" 
                                           min="1" 
                                           max="<%= Math.min(walletBalance, cart.total + 35) %>"
                                           step="0.01"
                                           class="wallet-input form-input rounded-lg border-gray-300 focus:border-green-500 focus:ring focus:ring-green-200 focus:ring-opacity-50"
                                           disabled>
                                    <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-lg font-medium">₹</span>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Options -->
                        <div class="space-y-3">
                            <label class="payment-option flex items-center space-x-4 p-4 border rounded-lg cursor-pointer transition-all duration-300
                                <%= (cart.total + 35) > 500 ? 'opacity-50 cursor-not-allowed' : '' %>">
                                <input type="radio" 
                                       name="paymentMethod" 
                                       value="COD" 
                                       class="form-radio text-green-600 focus:ring-green-500 focus:ring-offset-0"
                                    <%= (cart.total + 35) > 500 ? 'disabled' : '' %>>
                                <div class="flex-1">
                                    <div class="flex items-center">
                                        <i class="fas fa-money-bill-wave text-green-500 mr-2 text-xl"></i>
                                        <p class="font-medium text-base">Cash on Delivery</p>
                                    </div>
                                    <p class="text-sm text-gray-500 mt-1">Pay when you receive</p>
                                    <% if ((cart.total + 35) > 500) { %>
                                        <p class="text-red-500 text-sm mt-1 flex items-center">
                                            <i class="fas fa-exclamation-circle mr-1"></i>
                                            COD not available for orders above ₹500
                                        </p>
                                    <% } %>
                                </div>
                            </label>
                            <div class="payment-option border rounded-lg p-4 transition-all duration-300">
                                <div class="flex items-center space-x-4">
                                    <input type="radio" 
                                           name="paymentMethod" 
                                           value="ONLINE"
                                           class="form-radio text-green-600 focus:ring-green-500 focus:ring-offset-0">
                                    <div class="flex-1">
                                        <div class="flex items-center">
                                            <i class="fas fa-credit-card text-green-500 mr-2 text-xl"></i>
                                            <h3 class="font-medium text-base">Online Payment</h3>
                                        </div>
                                        <p class="text-sm text-gray-500 mt-1">Pay securely with Razorpay</p>
                                        <div class="flex items-center gap-2 mt-2">
                                            <img src="https://cdn.razorpay.com/static/assets/logo/payment.svg" alt="Razorpay" class="h-7">
                                            <span class="text-xs text-gray-500">Secured by Razorpay</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1">
                <div class="checkout-section bg-white rounded-lg shadow-sm p-4 sm:p-6 sticky top-4" data-aos="fade-left">
                    <h2 class="text-lg sm:text-xl font-semibold mb-4 flex items-center">
                        <i class="fas fa-shopping-basket text-green-600 mr-2"></i>
                        Order Summary
                    </h2>
                    
                    <div class="space-y-4">
                        <% cart.items.forEach(item => { %>
                            <div class="flex items-center space-x-3 sm:space-x-4 animate__animated animate__fadeIn">
                                <div class="relative">
                                    <img src="/uploads/products/<%= item.product.images[0].split('/').pop() %>" 
                                         alt="<%= item.product.name %>"
                                         class="w-14 h-14 sm:w-16 sm:h-16 object-cover rounded-lg">
                                    <span class="absolute -top-2 -right-2 w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs">
                                        <%= item.quantity %>
                                    </span>
                                </div>
                                <div class="flex-1">
                                    <h3 class="font-medium text-sm sm:text-base"><%= item.product.name %></h3>
                                    <p class="text-green-600 text-sm sm:text-base font-medium">₹<%= item.product.salePrice * item.quantity %></p>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <div class="border-t mt-4 sm:mt-6 pt-4 space-y-2">
                        <div class="flex justify-between text-sm sm:text-base">
                            <span class="text-gray-600">Subtotal</span>
                            <span class="font-medium">₹<%= cart.total %></span>
                        </div>
                        <div id="couponDiscountDiv" class="flex justify-between text-green-600 text-sm sm:text-base hidden animate__animated animate__fadeIn">
                            <span class="flex items-center">
                                <i class="fas fa-tag mr-2"></i>
                                Coupon Discount
                            </span>
                            <span>-₹<span id="couponDiscountAmount">0</span></span>
                        </div>
                        <div class="flex justify-between text-green-600 text-sm sm:text-base">
                            <span class="flex items-center">
                                <i class="fas fa-truck mr-2"></i>
                                Shipping
                            </span>
                            <span>₹35</span>
                        </div>
                        <div id="walletDeduction" class="flex justify-between text-red-600 text-sm sm:text-base hidden animate__animated animate__fadeIn">
                            <span class="flex items-center">
                                <i class="fas fa-wallet mr-2"></i>
                                Wallet Deduction
                            </span>
                            <span>-₹<span id="walletDeductionAmount">0</span></span>
                        </div>
                        <div class="flex justify-between font-bold text-base sm:text-lg border-t pt-2">
                            <span>Total</span>
                            <span>₹<span id="finalTotal"><%= cart.total + 35 %></span></span>
                        </div>
                    </div>

                    <button type="submit"
                            class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-all duration-300 mt-4 text-sm sm:text-base flex items-center justify-center pulse-button">
                        <i class="fas fa-lock mr-2"></i>
                        Place Order
                    </button>
                </div>
            </div>
        </form>
    </main>

    <!-- Coupon Modal -->
    <div id="couponModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 animate__animated animate__fadeIn" onclick="handleModalClick(event)">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-100 rounded-lg shadow-xl w-full max-w-md sm:max-w-lg max-h-[85vh] flex flex-col relative mx-auto animate__animated animate__zoomIn">
                <!-- Modal Header -->
                <div class="p-4 border-b bg-white rounded-t-lg sticky top-0 z-10">
                    <div class="flex justify-between items-center">
                        <div>
                            <h3 class="text-lg sm:text-xl font-semibold flex items-center">
                                <i class="fas fa-ticket-alt text-green-600 mr-2"></i>
                                Available Coupons
                            </h3>
                            <p class="text-xs sm:text-sm text-gray-500 mt-0.5 flex items-center">
                                <i class="fas fa-info-circle mr-1"></i>
                                Select a coupon to apply to your order
                            </p>
                        </div>
                        <button type="button" 
                                onclick="closeCouponModal()" 
                                class="text-gray-400 hover:text-gray-600 p-2 rounded-full hover:bg-gray-100 transition-all duration-200">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>
                <!-- Modal Body -->
                <div class="overflow-y-auto flex-1 px-4 py-3">
                    <div class="space-y-3" id="availableCoupons">
                        <!-- Loading State -->
                        <div class="animate-pulse space-y-3">
                            <% for(let i = 0; i < 3; i++) { %>
                                <div class="bg-white rounded-lg p-4">
                                    <div class="h-5 bg-gray-200 rounded w-1/3 mb-3"></div>
                                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                                    <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../layouts/footer.ejs') %>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        // Initialize AOS
        AOS.init({
            duration: 800,
            once: true,
            offset: 50
        });

        document.getElementById('checkoutForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            try {
                const defaultAddressId = document.querySelector('input[name="addressId"]')?.value;
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                const useWallet = document.getElementById('useWallet').checked;
                const walletAmount = useWallet ? Number(document.getElementById('walletAmount').value) || 0 : 0;
                
                // Add coupon information
                const couponData = appliedCoupon ? {
                    couponId: appliedCoupon._id,
                    code: appliedCoupon.code,
                    discountAmount: appliedCoupon.calculatedDiscount
                } : null;

                if (!defaultAddressId) {
                    Swal.fire({
                        icon: 'error',
                        title: 'No Shipping Address',
                        text: 'Please add a default shipping address to continue',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                // Get current total amount
                const currentTotal = Number(document.getElementById('finalTotal').textContent);

                // If total is 0, proceed with wallet payment directly
                if (currentTotal <= 0) {
                    const response = await fetch('/order/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            paymentMethod: 'WALLET',
                            useWallet,
                            walletAmount,
                            coupon: couponData
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        window.location.href = `/order/confirmation/${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Error creating order');
                    }
                    return;
                }

                // For non-zero totals, require payment method
                if (!paymentMethod && currentTotal > 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Method Required',
                        text: 'Please select a payment method',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                // Rest of your existing code for handling payments
                if (paymentMethod === 'ONLINE') {
                    // Create order for Razorpay
                    const orderResponse = await fetch('/order/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            useWallet: useWallet && walletAmount > 0,
                            walletAmount: Number(walletAmount) || 0,
                            coupon: couponData
                        })
                    });
                    
                    const orderData = await orderResponse.json();
                    
                    if (!orderData.success) {
                        throw new Error(orderData.message || 'Error creating Razorpay order');
                    }

                    // Initialize Razorpay
                    const options = {
                        key: '<%= process.env.KEY_ID %>',
                        amount: orderData.amount,
                        currency: "INR",
                        name: "Ecobazar",
                        description: "Purchase Payment",
                        order_id: orderData.orderId,
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/order/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        useWallet: useWallet && walletAmount > 0,
                                        walletAmount: Number(walletAmount) || 0,
                                        coupon: couponData
                                    })
                                });
                                
                                const verifyData = await verifyResponse.json();
                                
                                if (verifyData.success) {
                                    window.location.href = `/order/confirmation/${verifyData.orderId}`;
                                } else {
                                    window.location.href = `/order/failed/${verifyData.orderId}`;
                                }
                            } catch (error) {
                                console.error('Payment verification error:', error);
                                window.location.href = '/order/failed';
                            }
                        },
                        modal: {
                            ondismiss: async function() {
                                try {
                                    const response = await fetch('/order/payment-modal-closed', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            razorpay_order_id: orderData.orderId,
                                            useWallet,
                                            walletAmount,
                                            coupon: couponData
                                        })
                                    });
                                    
                                    const data = await response.json();
                                    if (data.success && data.orderId) {
                                        window.location.href = `/order/failed/${data.orderId}`;
                                    } else {
                                        window.location.href = '/order/failed';
                                    }
                                } catch (error) {
                                    console.error('Error handling modal close:', error);
                                    window.location.href = '/order/failed';
                                }
                            }
                        },
                        prefill: {
                            name: "<%= user.fname + ' ' + user.lname %>",
                            email: "<%= user.email %>"
                        },
                        theme: {
                            color: "#22C55E"
                        }
                    };
                    
                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (response) {
                        try {
                            const failureResponse = await fetch('/order/payment-modal-closed', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: orderData.orderId,
                                    useWallet,
                                    walletAmount,
                                    coupon: couponData,
                                    error: response.error
                                })
                            });
                            
                            const data = await failureResponse.json();
                            if (data.success && data.orderId) {
                                window.location.href = `/order/failed/${data.orderId}`;
                            } else {
                                window.location.href = '/order/failed';
                            }
                        } catch (error) {
                            console.error('Error handling payment failure:', error);
                            window.location.href = '/order/failed';
                        }
                    });
                    
                    rzp.open();
                    
                } else {
                    // For COD
                    const response = await fetch('/order/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            paymentMethod: 'COD',
                            useWallet: false,
                            walletAmount: 0,
                            coupon: couponData
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        window.location.href = `/order/confirmation/${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Error creating order');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while placing your order',
                    confirmButtonColor: '#22C55E',
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                });
            }
        });

        const useWalletCheckbox = document.getElementById('useWallet');
        const walletAmountInput = document.getElementById('walletAmount');
        const walletBalance = `<%= walletBalance %>`;
        const orderTotal = `<%= cart.total + 35 %>`;

        useWalletCheckbox.addEventListener('change', function() {
            walletAmountInput.disabled = !this.checked;
            if (this.checked) {
                const maxWalletUsage = Math.min(
                    Number(walletBalance),
                    10000, // Max ₹10,000 per transaction
                    Number(orderTotal)
                );
                walletAmountInput.value = maxWalletUsage;
                
                // Disable COD if wallet is being used
                const codRadio = document.querySelector('input[value="COD"]');
                if (codRadio && codRadio.checked) {
                    codRadio.checked = false;
                    const onlineRadio = document.querySelector('input[value="ONLINE"]');
                    if (onlineRadio) {
                        onlineRadio.checked = true;
                    }
                    Swal.fire({
                        icon: 'info',
                        title: 'Payment Method Changed',
                        text: 'Cash on Delivery is not available when using wallet payment',
                        confirmButtonColor: '#22C55E'
                    });
                }
            } else {
                walletAmountInput.value = '';
            }
            updateTotals();
        });

        walletAmountInput.addEventListener('input', function() {
            const maxWalletUsage = Math.min(
                Number(walletBalance),
                10000, // Max ₹10,000 per transaction
                Number(orderTotal)
            );
            
            if (this.value > maxWalletUsage) {
                this.value = maxWalletUsage;
                Swal.fire({
                    icon: 'info',
                    title: 'Maximum Limit',
                    text: `Maximum wallet usage for this order is ₹${maxWalletUsage}`,
                    confirmButtonColor: '#22C55E'
                });
            }
            
            if (this.value < 0) {
                this.value = 0;
            }
            
            updateTotals();
        });

        function updateTotals() {
            const subtotal = Number('<%= cart.total %>');
            const shipping = 35;
            let discount = 0;
            let walletDeduction = 0;
            
            // Calculate coupon discount first
            if (appliedCoupon) {
                if (appliedCoupon.discountType === 'percentage') {
                    discount = Math.min(
                        (subtotal * appliedCoupon.discountAmount) / 100,
                        appliedCoupon.maximumDiscount
                    );
                } else {
                    discount = Math.min(appliedCoupon.discountAmount, subtotal);
                }
                discount = Math.min(discount, subtotal);
                
                document.getElementById('couponDiscountDiv').classList.remove('hidden');
                document.getElementById('couponDiscountAmount').textContent = discount.toFixed(2);
            } else {
                document.getElementById('couponDiscountDiv').classList.add('hidden');
            }
            
            // Calculate wallet deduction
            if (useWalletCheckbox.checked) {
                walletDeduction = Number(walletAmountInput.value) || 0;
                const remainingAfterDiscount = subtotal - discount + shipping;
                walletDeduction = Math.min(walletDeduction, remainingAfterDiscount);
                
                if (walletDeduction > 0) {
                    document.getElementById('walletDeduction').classList.remove('hidden');
                    document.getElementById('walletDeductionAmount').textContent = walletDeduction.toFixed(2);
                    walletAmountInput.value = walletDeduction;
                } else {
                    document.getElementById('walletDeduction').classList.add('hidden');
                }
            } else {
                document.getElementById('walletDeduction').classList.add('hidden');
            }
            
            // Calculate final total
            const finalTotal = Math.max(0, subtotal - discount + shipping - walletDeduction);
            document.getElementById('finalTotal').textContent = finalTotal.toFixed(2);
            
            // Update payment options based on final total
            updatePaymentOptions(finalTotal);
        }

        let appliedCoupon = null;
        
        function openCouponModal() {
            const modal = document.getElementById('couponModal');
            modal.classList.remove('hidden');
            modal.classList.add('animate__fadeIn');
            document.body.style.overflow = 'hidden';
        }

        function closeCouponModal() {
            const modal = document.getElementById('couponModal');
            modal.classList.add('animate__fadeOut');
            setTimeout(() => {
                modal.classList.add('hidden');
                modal.classList.remove('animate__fadeOut');
                document.body.style.overflow = 'auto';
            }, 500);
        }

        function removeCoupon() {
            if (!appliedCoupon) return;
            
            fetch('/coupons/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    couponId: appliedCoupon._id 
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Reset coupon state
                    appliedCoupon = null;
                    document.getElementById('appliedCouponInfo').classList.add('hidden');
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = false;
                    document.getElementById('applyCouponBtn').disabled = false;
                    document.getElementById('couponDiscountDiv').classList.add('hidden');
                    document.getElementById('couponDiscountAmount').textContent = '0';
                    
                    // Re-enable wallet controls
                    const walletCheckbox = document.getElementById('useWallet');
                    const walletAmountInput = document.getElementById('walletAmount');
                    if (walletCheckbox.checked) {
                        walletAmountInput.disabled = false;
                    }
                    walletCheckbox.disabled = false;
                    
                    // Re-enable COD if eligible
                    const codRadio = document.querySelector('input[value="COD"]');
                    const total = Number('<%= cart.total %>') + 35;
                    const walletAmount = Number(walletAmountInput.value) || 0;
                    const remainingAmount = total - walletAmount;
                    
                    if (codRadio && remainingAmount <= 500 && !walletCheckbox.checked) {
                        codRadio.disabled = false;
                    }
                    
                    updateTotals();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Removed',
                        text: data.message,
                        confirmButtonColor: '#22C55E'
                    });
                } else {
                    throw new Error(data.message || 'Failed to remove coupon');
                }
            })
            .catch(error => {
                console.error('Error removing coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error removing coupon. Please try again.',
                    confirmButtonColor: '#22C55E'
                });
            });
        }

        // Enhanced loadAvailableCoupons function
        async function loadAvailableCoupons() {
            try {
                const response = await fetch('/coupons/available');
                const data = await response.json();
                
                const couponsContainer = document.getElementById('availableCoupons');
                
                if (!data.success || !data.coupons.length) {
                    couponsContainer.innerHTML = `
                        <div class="text-center py-8 animate__animated animate__fadeIn">
                            <div class="bg-gray-100 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                                <i class="fas fa-ticket-alt text-4xl text-gray-300"></i>
                            </div>
                            <p class="text-gray-500 text-sm sm:text-base mb-2">No coupons available at the moment</p>
                            <p class="text-xs text-gray-400">Check back later for exciting offers!</p>
                        </div>
                    `;
                    return;
                }
                
                couponsContainer.innerHTML = data.coupons.map((coupon, index) => `
                    <div class="coupon-card bg-white rounded-lg border hover:shadow-md transition-all duration-300 animate__animated animate__fadeIn animate__delay-${index}s">
                        <!-- Coupon Header -->
                        <div class="p-3 sm:p-4 border-b bg-gradient-to-r from-green-50 to-white relative overflow-hidden">
                            <div class="flex items-center justify-between gap-2 relative z-10">
                                <div class="flex items-center gap-2">
                                    <span class="font-semibold text-base sm:text-lg text-green-600">${coupon.code}</span>
                                    <span class="text-xs px-2 py-0.5 bg-green-100 text-green-800 rounded-full whitespace-nowrap flex items-center">
                                        <i class="fas fa-clock mr-1"></i>
                                        Active
                                    </span>
                                </div>
                                <button type="button" 
                                        class="apply-coupon-btn px-3 py-1.5 bg-green-600 text-white text-xs sm:text-sm rounded-lg hover:bg-green-700 transition-all duration-300 whitespace-nowrap flex items-center group"
                                        data-code="${coupon.code}">
                                    <i class="fas fa-tag mr-2 group-hover:rotate-12 transition-transform"></i>
                                    Apply Now
                                </button>
                            </div>
                            <!-- Decorative Elements -->
                            <div class="absolute -left-4 -bottom-4 w-24 h-24 bg-green-100 rounded-full opacity-50"></div>
                            <div class="absolute -right-4 -top-4 w-20 h-20 bg-green-50 rounded-full opacity-50"></div>
                        </div>

                        <!-- Coupon Body -->
                        <div class="p-3 sm:p-4 space-y-3">
                            <!-- Description -->
                            <p class="text-sm text-gray-600">${coupon.description}</p>

                            <!-- Discount Details -->
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
                                <div class="flex items-center gap-2 bg-gray-50 p-2 rounded-lg">
                                    <div class="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0">
                                        <i class="fas fa-tag text-green-500"></i>
                                    </div>
                                    <div>
                                        <span class="text-gray-500 text-xs">Minimum Purchase</span>
                                        <p class="font-medium">₹${coupon.minimumPurchase}</p>
                                    </div>
                                </div>
                                <div class="flex items-center gap-2 bg-gray-50 p-2 rounded-lg">
                                    <div class="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0">
                                        <i class="fas fa-percent text-green-500"></i>
                                    </div>
                                    <div>
                                        <span class="text-gray-500 text-xs">${coupon.discountType === 'percentage' ? 'Discount' : 'Flat Off'}</span>
                                        <p class="font-medium">
                                            ${coupon.discountType === 'percentage' ? 
                                              `${coupon.discountAmount}% up to ₹${coupon.maximumDiscount}` : 
                                              `₹${coupon.discountAmount}`}
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Expiry -->
                            <div class="flex items-center gap-2 pt-2 border-t text-xs text-gray-500">
                                <i class="far fa-calendar-alt"></i>
                                <span>Valid until: ${new Date(coupon.expiryDate).toLocaleDateString()}</span>
                            </div>
                        </div>
                    </div>
                `).join('');

                // Add event listeners after rendering
                document.querySelectorAll('.apply-coupon-btn').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        const code = this.getAttribute('data-code');
                        applyCouponCode(code);
                    });
                });
            } catch (error) {
                console.error('Error loading coupons:', error);
                const couponsContainer = document.getElementById('availableCoupons');
                couponsContainer.innerHTML = `
                    <div class="text-center py-8 animate__animated animate__fadeIn">
                        <div class="bg-red-50 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                            <i class="fas fa-exclamation-circle text-4xl text-red-300"></i>
                        </div>
                        <p class="text-red-500 text-sm sm:text-base mb-2">Error loading coupons</p>
                        <button onclick="loadAvailableCoupons()" 
                                class="text-green-600 hover:text-green-700 text-sm flex items-center justify-center mx-auto mt-2">
                            <i class="fas fa-redo mr-2"></i>
                            Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Apply coupon function
        async function applyCouponCode(code) {
            try {
                const walletCheckbox = document.getElementById('useWallet');
                const walletAmount = Number(document.getElementById('walletAmount').value) || 0;
                const subtotal = `<%= cart.total %>`;
                const shipping = 35;
                const cartTotal = subtotal + shipping;

                // If wallet is checked but amount is not set
                if (walletCheckbox.checked && walletAmount === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Set Wallet Amount First',
                        text: 'Please set your wallet amount before applying a coupon.',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                // Check if a coupon is already applied
                if (appliedCoupon) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Coupon Already Applied',
                        text: 'Please remove the currently applied coupon first.',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                const response = await fetch('/coupons/apply', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        code: code,
                        cartTotal: cartTotal,
                        subtotal: subtotal
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    appliedCoupon = {
                        _id: data.coupon._id,
                        code: data.coupon.code,
                        discountType: data.coupon.discountType,
                        discountAmount: data.coupon.discountAmount,
                        maximumDiscount: data.coupon.maximumDiscount,
                        calculatedDiscount: data.coupon.calculatedDiscount
                    };
                    
                    // Update UI elements
                    document.getElementById('appliedCouponInfo').classList.remove('hidden');
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = true;
                    document.getElementById('applyCouponBtn').disabled = true;
                    document.getElementById('appliedCouponCode').textContent = data.coupon.code;
                    
                    const discountText = data.coupon.discountType === 'percentage' ?
                        `${data.coupon.discountAmount}% off up to ₹${data.coupon.maximumDiscount}` :
                        `Flat ₹${data.coupon.discountAmount} off`;
                    document.getElementById('appliedCouponDiscount').textContent = discountText;
                    
                    // Lock wallet amount if it's being used
                    if (walletCheckbox.checked) {
                        walletAmountInput.disabled = true;
                        walletCheckbox.disabled = true;
                    }
                    
                    updateTotals();
                    closeCouponModal();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Applied',
                        text: `Discount of ₹${data.coupon.calculatedDiscount} applied successfully!`,
                        confirmButtonColor: '#22C55E'
                    });
                    
                    // Update payment options based on total
                    const total = subtotal + shipping - data.coupon.calculatedDiscount;
                    const codRadio = document.querySelector('input[value="COD"]');
                    if (codRadio) {
                        codRadio.disabled = true;
                        codRadio.checked = false;
                        const onlineRadio = document.querySelector('input[value="ONLINE"]');
                        if (onlineRadio) {
                            onlineRadio.checked = true;
                        }
                        Swal.fire({
                            icon: 'info',
                            title: 'Payment Method Changed',
                            text: 'Cash on Delivery is not available when using coupons',
                            confirmButtonColor: '#22C55E'
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Coupon Error',
                        text: data.message,
                        confirmButtonColor: '#22C55E'
                    });
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error applying coupon. Please try again.',
                    confirmButtonColor: '#22C55E'
                });
            }
        }

        // Initialize when document loads
        document.addEventListener('DOMContentLoaded', () => {
            loadAvailableCoupons();
            
            // Add event listener for manual coupon input
            const applyCouponBtn = document.getElementById('applyCouponBtn');
            applyCouponBtn.addEventListener('click', () => {
                const code = document.getElementById('couponCode').value.trim();
                if (code) {
                    applyCouponCode(code);
                }
            });
        });

        // Prevent modal close from submitting the form
        function handleModalClick(event) {
            if (event.target === event.currentTarget) {
                closeCouponModal();
                event.stopPropagation();
            }
        }

        // Handle form submission
        function handleSubmit(event) {
            event.preventDefault();
            // Add your order creation logic here
            // You can call your existing order creation function
        }

        function updatePaymentOptions(finalTotal) {
            const codRadio = document.querySelector('input[value="COD"]');
            const onlineRadio = document.querySelector('input[value="ONLINE"]');
            const submitButton = document.querySelector('button[type="submit"]');
            
            // Disable wallet for orders above ₹10,000
            if (finalTotal > 10000) {
                useWalletCheckbox.disabled = true;
                useWalletCheckbox.checked = false;
                document.getElementById('walletAmount').disabled = true;
                document.getElementById('walletAmount').value = '';
            }
            
            // Handle payment method availability
            if (codRadio) {
                const isCODAvailable = finalTotal <= 500 && !appliedCoupon && Number(document.getElementById('walletAmount').value || 0) === 0;
                codRadio.disabled = !isCODAvailable;
                
                if (codRadio.disabled && codRadio.checked) {
                    codRadio.checked = false;
                    if (onlineRadio) {
                        onlineRadio.checked = true;
                    }
                }
            }
            
            if (onlineRadio) {
                if (finalTotal <= 0) {
                    onlineRadio.disabled = true;
                    onlineRadio.checked = false;
                    if (codRadio) {
                        codRadio.disabled = true;
                        codRadio.checked = false;
                    }
                    submitButton.textContent = 'Place Order with Wallet';
                } else {
                    onlineRadio.disabled = false;
                    if ((!codRadio || codRadio.disabled) && !codRadio?.checked) {
                        onlineRadio.checked = true;
                    }
                    submitButton.textContent = 'Place Order';
                }
            }
            
            // Show appropriate messages
            if (finalTotal <= 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'Full Amount Covered',
                    text: 'Your order amount is fully covered by wallet/coupon. No additional payment needed.',
                    confirmButtonColor: '#22C55E'
                });
            }
        }
    </script>
</body>
</html> 