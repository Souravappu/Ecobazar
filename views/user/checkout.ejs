<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Ecobazar</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-50">
    <%- include('../layouts/headerWithoutUser.ejs') %>

    <main class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8">Checkout</h1>

        <form id="checkoutForm" class="grid grid-cols-1 lg:grid-cols-3 gap-8" onsubmit="handleSubmit(event)">
            <!-- Shipping Address Section -->
            <div class="lg:col-span-2 space-y-6">
                <div class="bg-white rounded-lg shadow-sm p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold">Shipping Address</h2>
                        <a href="/checkout/view-addresses" 
                           class="inline-flex items-center text-green-600 hover:text-green-700">
                            <i class="fas fa-address-book mr-2"></i>
                            Manage Addresses
                        </a>
                    </div>
                    
                    <% 
                    let defaultAddress = null;
                    if (addresses && addresses.length > 0) {
                        defaultAddress = addresses.find(addr => addr.isDefault);
                    }
                    %>
                    
                    <% if (defaultAddress) { %>
                        <div class="border rounded-lg p-4 border-green-500 bg-green-50">
                            <input type="hidden" name="addressId" value="<%= defaultAddress._id %>">
                            <div class="flex-1">
                                <div class="flex items-center space-x-2 mb-2">
                                    <h3 class="font-medium"><%= defaultAddress.name %></h3>
                                    <span class="text-sm text-gray-500">(<%= defaultAddress.addressType %>)</span>
                                    <span class="text-xs bg-green-500 text-white px-2 py-1 rounded">Default</span>
                                </div>
                                <p class="text-gray-600"><%= defaultAddress.streetAddress %></p>
                                <% if (defaultAddress.apartment) { %>
                                    <p class="text-gray-600"><%= defaultAddress.apartment %></p>
                                <% } %>
                                <p class="text-gray-600"><%= defaultAddress.city %>, <%= defaultAddress.postalCode %></p>
                                <% if (defaultAddress.landMark) { %>
                                    <p class="text-gray-600">Landmark: <%= defaultAddress.landMark %></p>
                                <% } %>
                                <p class="text-gray-600">Phone: <%= defaultAddress.phone %></p>
                            </div>
                        </div>
                    <% } else { %>
                        <div class="text-center py-8">
                            <p class="text-gray-600 mb-4">No default shipping address set</p>
                            <a href="/checkout/view-addresses" 
                               class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                                <i class="fas fa-plus mr-2"></i>
                                Add Shipping Address
                            </a>
                        </div>
                    <% } %>
                </div>

                <!-- Apply Coupon Section -->
                <div class="bg-white rounded-lg shadow-sm p-6 mb-4">
                    <h2 class="text-xl font-semibold mb-4">Apply Coupon</h2>
                    <div class="space-y-4">
                        <!-- Coupon Input Field -->
                        <div class="flex space-x-2">
                            <input type="text" 
                                   id="couponCode" 
                                   class="form-input rounded border-gray-300 flex-1"
                                   placeholder="Enter coupon code"
                                   <%= locals.appliedCoupon ? 'disabled' : '' %>>
                            <button type="button" 
                                    id="applyCouponBtn"
                                    class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                                    <%= locals.appliedCoupon ? 'disabled' : '' %>>
                                Apply
                            </button>
                            <button type="button" 
                                    onclick="openCouponModal()"
                                    class="px-4 py-2 border border-green-600 text-green-600 rounded hover:bg-green-50">
                                View Available Coupons
                            </button>
                        </div>

                        <!-- Applied Coupon Info -->
                        <div id="appliedCouponInfo" class="hidden border rounded-lg p-4 bg-green-50">
                            <div class="flex justify-between items-start">
                                <div>
                                    <div class="flex items-center space-x-2">
                                        <span class="text-green-600 font-medium">Applied Coupon:</span>
                                        <span id="appliedCouponCode" class="font-medium"></span>
                                    </div>
                                    <p id="appliedCouponDiscount" class="text-sm text-gray-600 mt-1"></p>
                                    <p id="discountAmount" class="text-sm text-green-600 mt-1"></p>
                                </div>
                                <button type="button" 
                                        onclick="removeCoupon()"
                                        class="text-red-600 hover:text-red-700">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                        <div id="couponMessage" class="mt-2 text-sm"></div>
                    </div>
                </div>

                <!-- Coupon Modal -->
                <div id="couponModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" onclick="handleModalClick(event)">
                    <div class="flex items-center justify-center min-h-screen p-4">
                        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] flex flex-col">
                            <div class="p-6 border-b">
                                <div class="flex justify-between items-center">
                                    <h3 class="text-xl font-semibold">Available Coupons</h3>
                                    <button type="button" onclick="closeCouponModal()" class="text-gray-500 hover:text-gray-700">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="p-6 overflow-y-auto flex-1">
                                <div class="grid gap-4" id="availableCoupons">
                                    <!-- Coupons will be loaded here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payment Method Section -->
                <div class="bg-white rounded-lg shadow-sm p-6">
                    <h2 class="text-xl font-semibold mb-4">Payment Method</h2>
                    <div class="space-y-4">
                        <div class="border rounded-lg p-4 mb-4">
                            <div class="flex justify-between items-center">
                                <div class="flex items-center space-x-4">
                                    <input type="checkbox" 
                                           id="useWallet" 
                                           name="useWallet"
                                           class="form-checkbox text-green-500"
                                           <%= walletBalance === 0 ? 'disabled' : '' %>>
                                    <div>
                                        <h3 class="font-medium">Wallet Balance</h3>
                                        <p class="text-sm text-gray-500">Available balance: â‚¹<%= walletBalance %></p>
                                    </div>
                                </div>
                                <div>
                                    <input type="number" 
                                           id="walletAmount" 
                                           name="walletAmount" 
                                           min="0" 
                                           max="<%= Math.min(walletBalance, cart.total + 35) %>"
                                           step="1"
                                           class="form-input rounded border-gray-300 w-24"
                                           disabled>
                                </div>
                            </div>
                        </div>
                        <div class="space-y-3">
                            <label class="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors
                                <%= (cart.total + 35) > 500 ? 'opacity-50 cursor-not-allowed' : '' %>">
                                <input type="radio" name="paymentMethod" value="COD" class="h-5 w-5 text-green-600"
                                    <%= (cart.total + 35) > 500 ? 'disabled' : '' %>>
                                <div>
                                    <p class="font-medium">Cash on Delivery</p>
                                    <p class="text-sm text-gray-500">Pay when you receive</p>
                                    <% if ((cart.total + 35) > 500) { %>
                                        <p class="text-red-500 text-sm mt-1">COD not available for orders above â‚¹500</p>
                                    <% } %>
                                </div>
                            </label>
                            <div class="border rounded-lg p-4">
                                <div class="flex items-center space-x-4">
                                    <input type="radio" 
                                           name="paymentMethod" 
                                           value="ONLINE"
                                           class="form-radio text-green-500">
                                    <div>
                                        <h3 class="font-medium">Online Payment</h3>
                                        <p class="text-sm text-gray-500">Pay securely with Razorpay</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm p-6 sticky top-4">
                    <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
                    
                    <div class="space-y-4">
                        <% cart.items.forEach(item => { %>
                            <div class="flex items-center space-x-4">
                                <img src="/uploads/products/<%= item.product.images[0].split('/').pop() %>" 
                                     alt="<%= item.product.name %>"
                                     class="w-16 h-16 object-cover rounded">
                                <div class="flex-1">
                                    <h3 class="font-medium"><%= item.product.name %></h3>
                                    <p class="text-sm text-gray-500">Qty: <%= item.quantity %></p>
                                    <p class="text-green-600">â‚¹<%= item.product.salePrice * item.quantity %></p>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <div class="border-t mt-6 pt-4 space-y-2">
                        <div class="flex justify-between">
                            <span>Subtotal</span>
                            <span>â‚¹<%= cart.total %></span>
                        </div>
                        <div id="couponDiscountDiv" class="flex justify-between text-green-600 hidden">
                            <span>Coupon Discount</span>
                            <span>-â‚¹<span id="couponDiscountAmount">0</span></span>
                        </div>
                        <div class="flex justify-between text-green-600">
                            <span>Shipping</span>
                            <span>â‚¹35</span>
                        </div>
                        <div id="walletDeduction" class="flex justify-between text-red-600 hidden">
                            <span>Wallet Deduction</span>
                            <span>-â‚¹<span id="walletDeductionAmount">0</span></span>
                        </div>
                        <div class="flex justify-between font-bold text-lg border-t pt-2">
                            <span>Total</span>
                            <span>â‚¹<span id="finalTotal"><%= cart.total + 35 %></span></span>
                        </div>
                    </div>

                    <button type="submit"
                            class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors">
                        Place Order
                    </button>
                </div>
            </div>
        </form>
    </main>

    <%- include('../layouts/footer.ejs') %>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        document.getElementById('checkoutForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            try {
                const defaultAddressId = document.querySelector('input[name="addressId"]')?.value;
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                
                // Get wallet data
                const useWallet = document.getElementById('useWallet').checked;
                const walletAmount = useWallet ? Number(document.getElementById('walletAmount').value) || 0 : 0;
                
                // Get coupon data
                const couponData = appliedCoupon ? {
                    couponId: appliedCoupon._id,
                    discountAmount: appliedCoupon.calculatedDiscount
                } : null;
                
                if (!defaultAddressId) {
                    Swal.fire({
                        icon: 'error',
                        title: 'No Shipping Address',
                        text: 'Please add a default shipping address to continue',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                if (!paymentMethod && !useWallet) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Method Required',
                        text: 'Please select a payment method',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                // If using only wallet for full payment
                if (useWallet && walletAmount === `<%= cart.total + 35 %>`) {
                    const response = await fetch('/order/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            paymentMethod: 'WALLET',
                            useWallet: true,
                            walletAmount,
                            coupon: couponData
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        window.location.href = `/order/confirmation/${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Error creating order');
                    }
                    return;
                }

                // For other payment methods (COD or Online)
                if (paymentMethod === 'ONLINE') {
                    // Create order for Razorpay
                    const orderResponse = await fetch('/order/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            useWallet: useWallet && walletAmount > 0,
                            walletAmount: Number(walletAmount) || 0,
                            coupon: appliedCoupon ? {
                                couponId: appliedCoupon._id,
                                discountAmount: appliedCoupon.calculatedDiscount
                            } : null
                        })
                    });
                    
                    const orderData = await orderResponse.json();
                    
                    if (!orderData.success) {
                        throw new Error(orderData.message || 'Error creating Razorpay order');
                    }

                    // Initialize Razorpay
                    const options = {
                        key: '<%= process.env.KEY_ID %>',
                        amount: orderData.amount,
                        currency: "INR",
                        name: "Ecobazar",
                        description: "Purchase Payment",
                        order_id: orderData.orderId,
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/order/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        useWallet: useWallet && walletAmount > 0,
                                        walletAmount: Number(walletAmount) || 0,
                                        coupon: appliedCoupon ? {
                                            couponId: appliedCoupon._id,
                                            discountAmount: appliedCoupon.calculatedDiscount
                                        } : null
                                    })
                                });
                                
                                const verifyData = await verifyResponse.json();
                                
                                if (verifyData.success) {
                                    window.location.href = `/order/confirmation/${verifyData.orderId}`;
                                } else {
                                    window.location.href = `/order/failed/${verifyData.orderId}`;
                                }
                            } catch (error) {
                                console.error('Payment verification error:', error);
                                window.location.href = '/order/failed';
                            }
                        },
                        modal: {
                            ondismiss: async function() {
                                try {
                                    const response = await fetch('/order/payment-modal-closed', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            razorpay_order_id: orderData.orderId,
                                            useWallet,
                                            walletAmount,
                                            coupon: couponData
                                        })
                                    });
                                    
                                    const data = await response.json();
                                    if (data.success && data.orderId) {
                                        window.location.href = `/order/failed/${data.orderId}`;
                                    } else {
                                        window.location.href = '/order/failed';
                                    }
                                } catch (error) {
                                    console.error('Error handling modal close:', error);
                                    window.location.href = '/order/failed';
                                }
                            }
                        },
                        prefill: {
                            name: "<%= user.fname + ' ' + user.lname %>",
                            email: "<%= user.email %>"
                        },
                        theme: {
                            color: "#22C55E"
                        }
                    };
                    
                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (response) {
                        try {
                            const failureResponse = await fetch('/order/payment-modal-closed', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: orderData.orderId,
                                    useWallet,
                                    walletAmount,
                                    coupon: couponData,
                                    error: response.error
                                })
                            });
                            
                            const data = await failureResponse.json();
                            if (data.success && data.orderId) {
                                window.location.href = `/order/failed/${data.orderId}`;
                            } else {
                                window.location.href = '/order/failed';
                            }
                        } catch (error) {
                            console.error('Error handling payment failure:', error);
                            window.location.href = '/order/failed';
                        }
                    });
                    
                    rzp.open();
                    
                } else {
                    // For COD
                    const response = await fetch('/order/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            paymentMethod: 'COD',
                            useWallet: false,
                            walletAmount: 0,
                            couponCode: null
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        window.location.href = `/order/confirmation/${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Error creating order');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while placing your order',
                    confirmButtonColor: '#22C55E'
                });
            }
        });

        const useWalletCheckbox = document.getElementById('useWallet');
        const walletAmountInput = document.getElementById('walletAmount');
        const walletBalance = `<%= walletBalance %>`;
        const orderTotal = `<%= cart.total + 35 %>`;

        useWalletCheckbox.addEventListener('change', function() {
            if (appliedCoupon && this.checked) {
                // If user tries to use wallet after coupon is applied
                Swal.fire({
                    icon: 'info',
                    title: 'Order of Application',
                    text: 'To use both wallet and coupon, please remove the coupon first, set your wallet amount, and then reapply the coupon.',
                    confirmButtonColor: '#22C55E'
                }).then(() => {
                    this.checked = false;
                });
                return;
            }
            
            walletAmountInput.disabled = !this.checked;
            if (this.checked) {
                walletAmountInput.value = Math.min(walletBalance, orderTotal);
                
                // Disable COD if wallet is being used
                const codRadio = document.querySelector('input[value="COD"]');
                if (codRadio && codRadio.checked) {
                    codRadio.checked = false;
                    const onlineRadio = document.querySelector('input[value="ONLINE"]');
                    if (onlineRadio) {
                        onlineRadio.checked = true;
                    }
                    Swal.fire({
                        icon: 'info',
                        title: 'Payment Method Changed',
                        text: 'Cash on Delivery is not available when using wallet payment',
                        confirmButtonColor: '#22C55E'
                    });
                }
            } else {
                walletAmountInput.value = '';
            }
            updatePaymentOptions();
        });

        walletAmountInput.addEventListener('input', function() {
            if (this.value > walletBalance) {
                this.value = walletBalance;
            }
            if (this.value > orderTotal) {
                this.value = orderTotal;
            }
            updatePaymentOptions();
        });

        function updatePaymentOptions() {
            const walletAmount = Number(walletAmountInput.value) || 0;
            const remainingAmount = orderTotal - walletAmount;
            
            const codRadio = document.querySelector('input[value="COD"]');
            const onlineRadio = document.querySelector('input[value="ONLINE"]');
            
            const walletDeductionDiv = document.getElementById('walletDeduction');
            const walletDeductionAmount = document.getElementById('walletDeductionAmount');
            const finalTotalSpan = document.getElementById('finalTotal');
            
            // Calculate final total
            let finalTotal = orderTotal;
            if (walletAmount > 0) {
                finalTotal -= walletAmount;
                walletDeductionDiv.classList.remove('hidden');
                walletDeductionAmount.textContent = walletAmount.toFixed(2);
            } else {
                walletDeductionDiv.classList.add('hidden');
                walletDeductionAmount.textContent = '0';
            }
            if (appliedCoupon) {
                finalTotal -= appliedCoupon.calculatedDiscount;
            }
            finalTotalSpan.textContent = finalTotal.toFixed(2);
            
            // Handle COD availability
            if (codRadio) {
                const isCODAvailable = finalTotal <= 500 && !appliedCoupon && walletAmount === 0;
                codRadio.disabled = !isCODAvailable;
                
                if (!isCODAvailable && codRadio.checked) {
                    codRadio.checked = false;
                    onlineRadio.checked = true;
                    
                    let message = [];
                    if (finalTotal > 500) message.push('order total exceeds â‚¹500');
                    if (appliedCoupon) message.push('coupon is applied');
                    if (walletAmount > 0) message.push('wallet payment is selected');
                    
                    Swal.fire({
                        icon: 'info',
                        title: 'Cash on Delivery Unavailable',
                        text: `COD is not available when ${message.join(' or ')}`,
                        confirmButtonColor: '#22C55E'
                    });
                }
            }
            
            // Handle wallet payment only case
            if (walletAmount === orderTotal) {
                codRadio.disabled = true;
                onlineRadio.disabled = true;
                codRadio.checked = false;
                onlineRadio.checked = false;
            } else {
                onlineRadio.disabled = false;
            }
        }

        // Add event listeners for payment method changes
        document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
            radio.addEventListener('change', updatePaymentOptions);
        });

        document.addEventListener('DOMContentLoaded', function() {
            if (useWalletCheckbox.checked) {
                updatePaymentOptions();
            }
        });

        let appliedCoupon = null;
        
        function openCouponModal() {
            document.getElementById('couponModal').classList.remove('hidden');
        }

        function closeCouponModal() {
            document.getElementById('couponModal').classList.add('hidden');
        }

        function removeCoupon() {
            if (!appliedCoupon) return;
            
            fetch('/coupons/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    couponId: appliedCoupon._id 
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reset coupon state
                    appliedCoupon = null;
                    document.getElementById('appliedCouponInfo').classList.add('hidden');
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = false;
                    document.getElementById('applyCouponBtn').disabled = false;
                    document.getElementById('couponDiscountDiv').classList.add('hidden');
                    document.getElementById('couponDiscountAmount').textContent = '0';
                    
                    // Re-enable wallet controls
                    const walletCheckbox = document.getElementById('useWallet');
                    const walletAmountInput = document.getElementById('walletAmount');
                    if (walletCheckbox.checked) {
                        walletAmountInput.disabled = false;
                    }
                    walletCheckbox.disabled = false;
                    
                    // Re-enable COD if eligible
                    const codRadio = document.querySelector('input[value="COD"]');
                    const total = `<%= cart.total + 35 %>`;
                    const walletAmount = Number(walletAmountInput.value) || 0;
                    const remainingAmount = total - walletAmount;
                    
                    if (codRadio && remainingAmount <= 500 && !walletCheckbox.checked) {
                        codRadio.disabled = false;
                    }
                    
                    updateTotals();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Removed',
                        text: 'Coupon has been removed successfully',
                        confirmButtonColor: '#22C55E'
                    });
                }
            })
            .catch(error => {
                console.error('Error removing coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error removing coupon. Please try again.',
                    confirmButtonColor: '#22C55E'
                });
            });
        }

        // Load available coupons
        async function loadAvailableCoupons() {
            try {
                const response = await fetch('/coupons/available');
                const data = await response.json();
                
                const couponsContainer = document.getElementById('availableCoupons');
                
                if (!data.success || !data.coupons.length) {
                    couponsContainer.innerHTML = `
                        <div class="text-center py-8 text-gray-500">
                            No coupons available at the moment
                        </div>
                    `;
                    return;
                }
                
                // Render coupons
                couponsContainer.innerHTML = data.coupons.map(coupon => `
                    <div class="border rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div class="flex flex-col space-y-2">
                            <div class="flex justify-between items-start">
                                <div>
                                    <span class="font-medium text-lg">${coupon.code}</span>
                                    <p class="text-sm text-gray-600 mt-1">${coupon.description}</p>
                                </div>
                                <button type="button" 
                                        class="apply-coupon-btn px-4 py-2 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                                        data-code="${coupon.code}">
                                    Apply
                                </button>
                            </div>
                            <div class="border-t pt-2 mt-2">
                                <div class="grid grid-cols-2 gap-4 text-sm">
                                    <div>
                                        <span class="text-gray-600">Min Purchase:</span>
                                        <span class="font-medium">â‚¹${coupon.minimumPurchase}</span>
                                    </div>
                                    <div>
                                        <span class="text-gray-600">
                                            ${coupon.discountType === 'percentage' ? 'Discount:' : 'Flat Off:'}
                                        </span>
                                        <span class="font-medium">
                                            ${coupon.discountType === 'percentage' ? 
                                              `${coupon.discountAmount}% up to â‚¹${coupon.maximumDiscount}` : 
                                              `â‚¹${coupon.discountAmount}`}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');

                // Add event listeners after rendering
                document.querySelectorAll('.apply-coupon-btn').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        const code = this.getAttribute('data-code');
                        console.log('Applying coupon:', code); // Debug log
                        applyCouponCode(code);
                    });
                });
            } catch (error) {
                console.error('Error loading coupons:', error);
            }
        }

        // Apply coupon function
        async function applyCouponCode(code) {
            try {
                const walletCheckbox = document.getElementById('useWallet');
                const walletAmount = Number(document.getElementById('walletAmount').value) || 0;
                const subtotal = `<%= cart.total %>`;
                const shipping = 35;
                const cartTotal = subtotal + shipping;

                // If wallet is checked but amount is not set
                if (walletCheckbox.checked && walletAmount === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Set Wallet Amount First',
                        text: 'Please set your wallet amount before applying a coupon.',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                // Check if a coupon is already applied
                if (appliedCoupon) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Coupon Already Applied',
                        text: 'Please remove the currently applied coupon first.',
                        confirmButtonColor: '#22C55E'
                    });
                    return;
                }

                const response = await fetch('/coupons/apply', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        code: code,
                        cartTotal: cartTotal,
                        subtotal: subtotal
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    appliedCoupon = {
                        _id: data.coupon._id,
                        code: data.coupon.code,
                        discountType: data.coupon.discountType,
                        discountAmount: data.coupon.discountAmount,
                        maximumDiscount: data.coupon.maximumDiscount,
                        calculatedDiscount: data.coupon.calculatedDiscount
                    };
                    
                    // Update UI elements
                    document.getElementById('appliedCouponInfo').classList.remove('hidden');
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = true;
                    document.getElementById('applyCouponBtn').disabled = true;
                    document.getElementById('appliedCouponCode').textContent = data.coupon.code;
                    
                    const discountText = data.coupon.discountType === 'percentage' ?
                        `${data.coupon.discountAmount}% off up to â‚¹${data.coupon.maximumDiscount}` :
                        `Flat â‚¹${data.coupon.discountAmount} off`;
                    document.getElementById('appliedCouponDiscount').textContent = discountText;
                    
                    // Lock wallet amount if it's being used
                    if (walletCheckbox.checked) {
                        walletAmountInput.disabled = true;
                        walletCheckbox.disabled = true;
                    }
                    
                    updateTotals();
                    closeCouponModal();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Applied',
                        text: `Discount of â‚¹${data.coupon.calculatedDiscount} applied successfully!`,
                        confirmButtonColor: '#22C55E'
                    });
                    
                    // Update payment options based on total
                    const total = subtotal + shipping - data.coupon.calculatedDiscount;
                    const codRadio = document.querySelector('input[value="COD"]');
                    if (codRadio) {
                        codRadio.disabled = true;
                        codRadio.checked = false;
                        const onlineRadio = document.querySelector('input[value="ONLINE"]');
                        if (onlineRadio) {
                            onlineRadio.checked = true;
                        }
                        Swal.fire({
                            icon: 'info',
                            title: 'Payment Method Changed',
                            text: 'Cash on Delivery is not available when using coupons',
                            confirmButtonColor: '#22C55E'
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Coupon Error',
                        text: data.message,
                        confirmButtonColor: '#22C55E'
                    });
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error applying coupon. Please try again.',
                    confirmButtonColor: '#22C55E'
                });
            }
        }

        // Initialize when document loads
        document.addEventListener('DOMContentLoaded', () => {
            loadAvailableCoupons();
            
            // Add event listener for manual coupon input
            const applyCouponBtn = document.getElementById('applyCouponBtn');
            applyCouponBtn.addEventListener('click', () => {
                const code = document.getElementById('couponCode').value.trim();
                if (code) {
                    applyCouponCode(code);
                }
            });
        });

        // Prevent modal close from submitting the form
        function handleModalClick(event) {
            if (event.target === event.currentTarget) {
                closeCouponModal();
                event.stopPropagation();
            }
        }

        // Handle form submission
        function handleSubmit(event) {
            event.preventDefault();
            // Add your order creation logic here
            // You can call your existing order creation function
        }

        function updateTotals() {
            const subtotal = `<%= cart.total %>`;
            const shipping = 35;
            let discount = 0;
            let walletDeduction = Number(document.getElementById('walletAmount').value) || 0;
            
            if (appliedCoupon) {
                // Calculate discount based on subtotal only
                if (appliedCoupon.discountType === 'percentage') {
                    discount = Math.min(
                        (subtotal * appliedCoupon.discountAmount) / 100,
                        appliedCoupon.maximumDiscount
                    );
                } else {
                    discount = Math.min(appliedCoupon.discountAmount, subtotal);
                }
                
                document.getElementById('couponDiscountDiv').classList.remove('hidden');
                document.getElementById('couponDiscountAmount').textContent = discount.toFixed(2);
            } else {
                document.getElementById('couponDiscountDiv').classList.add('hidden');
            }
            
            if (walletDeduction > 0) {
                document.getElementById('walletDeduction').classList.remove('hidden');
                document.getElementById('walletDeductionAmount').textContent = walletDeduction.toFixed(2);
            } else {
                document.getElementById('walletDeduction').classList.add('hidden');
            }
            
            // Add shipping charge after all discounts
            const total = subtotal - walletDeduction - discount + shipping;
            document.getElementById('finalTotal').textContent = total.toFixed(2);
        }
    </script>
</body>
</html> 