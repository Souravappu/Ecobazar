<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.name %> - Ecobazar</title>
    
    <!-- Include existing stylesheets -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Add Drift Zoom CSS and JS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/drift-zoom@1.5.1/dist/drift-basic.min.css">
    <script src="https://cdn.jsdelivr.net/npm/drift-zoom@1.5.1/dist/Drift.min.js"></script>

    <!-- Add xzoom CSS and JS -->
    <link rel="stylesheet" href="https://unpkg.com/xzoom/dist/xzoom.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://unpkg.com/xzoom/dist/xzoom.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/js-image-zoom/js-image-zoom.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/easyzoom/2.5.2/easyzoom.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/easyzoom/2.5.2/easyzoom.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .product-magnifier {
            position: relative;
            width: 100%;
            background: white;
            border-radius: 0.5rem;
        }

        .magnifier-img {
            width: 100%;
            height: 400px;
            object-fit: contain;
            display: block;
        }

        .magnifying-glass {
            position: absolute;
            background-repeat: no-repeat;
            border: 2px solid #22c55e;
            border-radius: 50%;
            cursor: none;
            display: none;
            width: 150px;
            height: 150px;
        }

        .thumbnail-container {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            overflow-x: auto;
            padding: 0.5rem;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border: 2px solid transparent;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: translateY(-2px);
        }

        .thumbnail.active {
            border-color: #22c55e;
        }

        .quantity-input {
            width: 80px;
            text-align: center;
            border: 1px solid #e5e7eb;
            border-radius: 0.375rem;
        }

        .quantity-btn {
            padding: 0.5rem 1rem;
            background-color: #f3f4f6;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
        }

        .quantity-btn:hover {
            background-color: #e5e7eb;
        }

        .product-description {
            line-height: 1.8;
        }

        /* Custom Tabs Styling */
        .tab-button {
            position: relative;
            padding-bottom: 0.5rem;
        }

        .tab-button::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: transparent;
            transition: background-color 0.3s ease;
        }

        .tab-button.active::after {
            background-color: #22c55e;
        }

        .xzoom-container {
            position: relative;
            background: white;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .xzoom {
            max-width: 100%;
            height: auto;
        }

        .xzoom-thumbs {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .xzoom-gallery {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border: 2px solid transparent;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .xzoom-gallery:hover {
            border-color: #22c55e;
            transform: translateY(-2px);
        }

        .xzoom-gallery.active {
            border-color: #22c55e;
        }

        .xzoom-lens {
            border: 1px solid #22c55e;
            border-radius: 4px;
        }

        .xzoom-preview {
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        /* Custom loading animation */
        .xzoom-loading {
            background: url('/images/loading.gif') center center no-repeat;
            width: 48px;
            height: 48px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        /* Add these styles for similar products */
        .product-card {
            transition: all 0.3s ease;
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .product-card img {
            aspect-ratio: 1;
            object-fit: cover;
        }

        .product-card h3 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            height: 2.5rem;
        }

        /* Loading skeleton animation */
        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }

        .main-image-container {
            position: relative;
            height: 400px;
        }

        #mainImage {
            height: 100%;
            width: 100%;
            object-fit: contain;
        }

        .zoom-lens {
            position: absolute;
            border: 1px solid #d1d5db;
            width: 100px;
            height: 100px;
            background-color: rgba(255, 255, 255, 0.4);
            cursor: none;
            display: none;
        }

        .zoom-result {
            width: 400px;
            height: 400px;
            border: 1px solid #d1d5db;
            background-repeat: no-repeat;
            display: none;
        }

        .thumbnail {
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: translateY(-2px);
        }

        .product-image-container {
            position: relative;
            width: 100%;
            background: white;
            border-radius: 0.5rem;
            padding: 1rem;
        }

        .main-image {
            width: 100%;
            height: 400px;
            object-fit: contain;
        }

        .thumbnail-container {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            overflow-x: auto;
            padding: 0.5rem;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border: 2px solid transparent;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: translateY(-2px);
        }

        .thumbnail.active {
            border-color: #22c55e;
        }

        /* Hide scrollbar but keep functionality */
        .thumbnail-container::-webkit-scrollbar {
            display: none;
        }
        
        .thumbnail-container {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .product-image-container {
            background: white;
            border-radius: 0.5rem;
            padding: 1rem;
        }

        .easyzoom {
            display: inline-block;
            width: 100%;
        }

        .easyzoom img {
            width: 100%;
            height: 400px;
            object-fit: contain;
        }

        .thumbnail-container {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            overflow-x: auto;
            padding: 0.5rem;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border: 2px solid transparent;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: translateY(-2px);
        }

        .thumbnail.active {
            border-color: #22c55e;
        }

        /* Hide scrollbar but keep functionality */
        .thumbnail-container::-webkit-scrollbar {
            display: none;
        }
        
        .thumbnail-container {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .wishlist-active {
            color: #22c55e !important;
            transform: scale(1.1);
        }
        
        .wishlist-btn {
            transition: all 0.3s ease;
        }
        
        .wishlist-btn:hover {
            transform: scale(1.1);
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../layouts/headerWithoutUser.ejs') %>

    <main class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="text-sm mb-6">
            <ol class="list-none p-0 inline-flex">
                <li class="flex items-center">
                    <a href="/" class="text-gray-500 hover:text-green-600">Home</a>
                    <svg class="w-3 h-3 mx-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                    </svg>
                </li>
                <li class="flex items-center">
                    <a href="/category/<%= product.category._id %>" class="text-gray-500 hover:text-green-600">
                        <%= product.category.name %>
                    </a>
                    <svg class="w-3 h-3 mx-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                    </svg>
                </li>
                <li class="text-gray-700"><%= product.name %></li>
            </ol>
        </nav>

        <!-- Product Details Section -->
        <div class="grid md:grid-cols-2 gap-8">
            <!-- Product Images -->
            <div class="space-y-4">
                <div class="product-image-container">
                    <div class="easyzoom easyzoom--overlay">
                        <a href="<%= product.images[0] %>">
                            <img id="mainImage" 
                                 src="<%= product.images[0] %>" 
                                 alt="<%= product.name %>">
                        </a>
                    </div>
                </div>
                    
                <!-- Thumbnails -->
                        <div class="thumbnail-container">
                            <% product.images.forEach((image, index) => { %>
                                <img src="<%= image %>" 
                                     alt="Product thumbnail"
                                     class="thumbnail <%= index === 0 ? 'active' : '' %>"
                                     onclick="changeMainImage(this, '<%= image %>')">
                            <% }); %>
                        </div>
                    </div>

            <!-- Product Info -->
            <div class="space-y-6">
                <h1 class="text-3xl font-bold text-gray-900"><%= product.name %></h1>
                
                <!-- Price Section -->
                <div class="flex items-baseline space-x-4">
                    <span class="text-2xl font-bold text-green-600">₹<%= product.salePrice %></span>
                    <% if (product.regularPrice > product.salePrice) { %>
                        <span class="text-lg text-gray-500 line-through">₹<%= product.regularPrice %></span>
                        <span class="text-sm text-red-500">
                            <%= Math.round((product.regularPrice - product.salePrice) / product.regularPrice * 100) %>% OFF
                        </span>
                    <% } %>
                </div>

                <!-- Unit Information -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-lg font-semibold mb-3">Product Details</h3>
                    <div class="space-y-2">
                        <div class="flex items-center gap-3">
                            <i class="fas <%= product.unit === 'kg' ? 'fa-weight' : 'fa-layer-group' %> text-green-600"></i>
                            <div>
                                <span class="text-gray-600">Sold by:</span>
                                <span class="font-medium">
                                    <%= product.unitQuantity %> <%= product.unit === 'kg' ? 'kg' : 'pcs' %> 
                                    per <%= product.unit === 'kg' ? 'unit' : 'pack' %>
                                </span>
                            </div>
                        </div>
                        
                        <div class="flex items-center gap-3">
                            <i class="fas fa-box text-green-600"></i>
                            <div>
                                <span class="text-gray-600">Availability:</span>
                                <span class="font-medium <%= product.quantity > 0 ? 'text-green-600' : 'text-red-500' %>">
                                    <%= product.quantity %> <%= product.unit === 'kg' ? 'units' : 'packs' %> in stock
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Stock Status -->
                <div class="flex items-center space-x-2">
                    <% if (product.quantity && product.quantity > 0) { %>
                        <div class="flex items-center space-x-2">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <span class="w-2 h-2 bg-green-500 rounded-full mr-1"></span>
                                In Stock
                            </span>
                            <span class="text-sm text-gray-600">(<%= product.quantity %> units available)</span>
                        </div>

                        <!-- Quantity Selector -->
                        <div class="flex items-center space-x-4 mt-4">
                            <label class="text-gray-700">Quantity:</label>
                            <div class="flex items-center">
                                <button type="button" 
                                        class="quantity-btn rounded-l-md" 
                                        onclick="updateQuantity(-1)">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="number" 
                                       value="1" 
                                       min="1" 
                                       max="<%= Math.min(5, product.quantity) %>" 
                                       class="quantity-input py-2" 
                                       id="quantity"
                                       onchange="validateQuantity(this)"
                                       onkeyup="validateQuantity(this)">
                                <button type="button" 
                                        class="quantity-btn rounded-r-md" 
                                        onclick="updateQuantity(1)">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                            <span class="text-sm text-gray-500">
                                <% if (product.quantity > 5) { %>
                                    Maximum 5 units per order
                                <% } else { %>
                                    Maximum <%= product.quantity %> units available
                                <% } %>
                            </span>
                        </div>
                    <% } else { %>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                            <span class="w-2 h-2 bg-red-500 rounded-full mr-1"></span>
                            Out of Stock
                        </span>
                    <% } %>
                </div>

                <!-- Action Buttons -->
                <div class="flex space-x-4">
                    <% if (product.quantity > 0) { %>
                        <button onclick="addToCart('<%= product._id %>')"
                                class="flex-1 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2">
                            <i class="fas fa-shopping-cart"></i>
                            <span>Add to Cart</span>
                        </button>
                        <button onclick="toggleWishlist('<%= product._id %>')"
                                class="wishlist-btn p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                                data-product-id="<%= product._id %>">
                            <i class="fas fa-heart text-xl"></i>
                        </button>
                    <% } else { %>
                        <button disabled
                                class="flex-1 bg-gray-400 text-white px-6 py-3 rounded-lg cursor-not-allowed">
                            Out of Stock
                        </button>
                    <% } %>
                </div>

                <!-- Product Details Tabs -->
                <div class="border-t pt-6 mt-8">
                    <div class="flex space-x-8 border-b">
                        <button class="tab-button active" onclick="showTab('description')">Description</button>
                       
                    </div>

                    <!-- Tab Contents -->
                    <div class="py-4">
                        <div id="description" class="tab-content product-description">
                            <%= product.description %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Similar Products Section -->
    <div class="container mx-auto px-4 py-16 border-t">
        <div class="mb-8">
            <h2 class="text-2xl font-bold">Similar Products</h2>
            <p class="text-gray-600 mt-2">You might also like these products from <%= product.category.name %></p>
        </div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            <% if (relatedProducts && relatedProducts.length > 0) { %>
            <% relatedProducts.forEach(relatedProduct => { %>
                    <!-- Similar product card -->
                <div class="product-card bg-white rounded-lg shadow-sm overflow-hidden">
                    <a href="/product/<%= relatedProduct._id %>" class="block relative">
                        <img src="<%= relatedProduct.images[0] %>" 
                             alt="<%= relatedProduct.name %>"
                             class="w-full h-48 object-cover transition-transform duration-300 hover:scale-105">
                        <% if (relatedProduct.regularPrice > relatedProduct.salePrice) { %>
                            <div class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs">
                                <%= Math.round((relatedProduct.regularPrice - relatedProduct.salePrice) / relatedProduct.regularPrice * 100) %>% OFF
                            </div>
                        <% } %>
                    </a>
                        <!-- Product details -->
                    <div class="p-4">
                        <a href="/product/<%= relatedProduct._id %>" class="block hover:text-green-600 transition-colors">
                            <h3 class="font-semibold text-gray-800 line-clamp-2 h-12">
                                <%= relatedProduct.name %>
                            </h3>
                        </a>
                        <div class="mt-2 flex justify-between items-center">
                            <div class="space-y-1">
                                <div class="text-green-600 font-bold">₹<%= relatedProduct.salePrice %></div>
                                <% if (relatedProduct.regularPrice > relatedProduct.salePrice) { %>
                                    <div class="text-sm text-gray-500 line-through">₹<%= relatedProduct.regularPrice %></div>
                                <% } %>
                            </div>
                            <% if (relatedProduct.quantity > 0) { %>
                                <button onclick="addToCart('<%= relatedProduct._id %>')" 
                                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                                    <i class="fas fa-shopping-cart"></i>
                                </button>
                            <% } else { %>
                                <span class="text-red-500 text-sm font-medium">Out of Stock</span>
                            <% } %>
                        </div>
                        <% if (relatedProduct.quantity > 0) { %>
                            <div class="mt-2 text-sm text-gray-600">
                                <%= relatedProduct.quantity %> units available
                            </div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
            <% } else { %>
                <div class="col-span-full text-center py-8 text-gray-500">
                    No similar products found
                            </div>
                        <% } %>
        </div>
    </div>

    <%- include('../layouts/footer.ejs') %>

    <script>
        let zoomInstance = null;

        function initZoom(imageSrc) {
            // Destroy previous zoom instance if exists
            if (zoomInstance) {
                zoomInstance.kill();
                zoomInstance = null;
            }

            // Initialize new zoom instance
            const options = {
                width: 400,
                height: 400,
                zoomWidth: 500,
                offset: {vertical: 0, horizontal: 10},
                scale: 1.5,
                zoomPosition: 'right',
                zoomContainer: document.querySelector('.product-image-container')
            };

            zoomInstance = new ImageZoom(document.getElementById('img-container'), options);
        }

        // Handle thumbnail clicks
        function changeMainImage(thumbnailElement, newSrc) {
            const mainImage = document.getElementById('mainImage');
                mainImage.src = newSrc;

            // Update active thumbnail
            document.querySelectorAll('.thumbnail').forEach(thumb => {
                thumb.classList.remove('active');
            });
            thumbnailElement.classList.add('active');

            // Reinitialize zoom with new image
            initZoom(newSrc);
        }

        // Initialize zoom on page load
        document.addEventListener('DOMContentLoaded', () => {
            initZoom(document.getElementById('mainImage').src);

            // Handle mobile devices
            if ('ontouchstart' in window) {
                const mainImage = document.getElementById('mainImage');
                let isZoomed = false;

                mainImage.addEventListener('click', function() {
                    isZoomed = !isZoomed;
                    if (isZoomed) {
                        this.style.transform = 'scale(2)';
                        this.style.cursor = 'zoom-out';
                    } else {
                        this.style.transform = 'scale(1)';
                        this.style.cursor = 'zoom-in';
                    }
                });

                // Allow panning when zoomed on mobile
                mainImage.addEventListener('touchmove', function(e) {
                    if (isZoomed) {
                        e.preventDefault();
                        const touch = e.touches[0];
                        const rect = this.getBoundingClientRect();
                        const x = touch.clientX - rect.left;
                        const y = touch.clientY - rect.top;
                        
                        this.style.transformOrigin = `${x}px ${y}px`;
                    }
                });
            }
        });

        // Quantity validation
        function validateQuantity(input) {
            const min = 1;
            const max = Math.min(5,` <%= product.quantity %>`); // Limit to either 5 or stock, whichever is lower
            let value = parseInt(input.value);

            if (isNaN(value) || value < min) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Quantity',
                    text: 'Minimum quantity is 1',
                    showConfirmButton: false,
                    timer: 1500
                });
                input.value = min;
                return;
            }

            if (value > max) {
                let message = '';
                if (max === 5) {
                    message = 'Maximum allowed quantity is 5 per order';
                } else {
                    message = `Only ${max} units available in stock`;
                }

                Swal.fire({
                    icon: 'warning',
                    title: 'Quantity Limit Reached',
                    text: message,
                    showConfirmButton: false,
                    timer: 2000
                });
                input.value = max;
                return;
            }
        }

        function updateQuantity(change) {
            const input = document.getElementById('quantity');
            const currentValue = parseInt(input.value);
            const min = 1;
            const max = Math.min(5,` <%= product.quantity %>`);
            const newValue = currentValue + change;

            if (newValue < min) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Minimum Quantity',
                    text: 'Quantity cannot be less than 1',
                    showConfirmButton: false,
                    timer: 1500
                });
                return;
            }

            if (newValue > max) {
                let message = '';
                if (max === 5) {
                    message = 'Maximum allowed quantity is 5 per order';
                } else {
                    message = `Only ${max} units available in stock`;
                }

                Swal.fire({
                    icon: 'warning',
                    title: 'Quantity Limit Reached',
                    text: message,
                    showConfirmButton: false,
                    timer: 2000
                });
                return;
            }

            input.value = newValue;
        }

        // Handle tab switching
        function showTab(tabId) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            event.target.classList.add('active');

            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.add('hidden');
            });
            document.getElementById(tabId).classList.remove('hidden');
        }

        // Initialize wishlist button based on server data
        async function initializeWishlistButton() {
            try {
                const response = await fetch('/wishlist/items');
                const data = await response.json();
                
                if (data.success) {
                    const wishlistItems = data.items;
                    const productId = '<%= product._id %>';
                    const wishlistBtn = document.querySelector('.wishlist-btn');
                    
                    if (wishlistBtn) {
                        const isInWishlist = wishlistItems.some(item => 
                            item.product.toString() === productId
                        );
                        
                        if (isInWishlist) {
                            wishlistBtn.classList.add('wishlist-active');
                        }
                    }
                }
            } catch (error) {
                console.error('Error initializing wishlist:', error);
            }
        }

        // Call initialization on page load
        document.addEventListener('DOMContentLoaded', initializeWishlistButton);

        function addToCart(productId) {
            // Check if user is logged in first
            fetch('/check-auth')
                .then(response => response.json())
                .then(data => {
                    if (!data.authenticated) {
                        Swal.fire({
                            title: 'Please Login',
                            text: 'You need to login to add items to cart',
                            icon: 'info',
                            showCancelButton: true,
                            confirmButtonText: 'Login',
                            cancelButtonText: 'Cancel',
                            confirmButtonColor: '#22C55E',
                            cancelButtonColor: '#6B7280'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/login';
                            }
                        });
                        return;
                    }

                    // Proceed with adding to cart
                    fetch('/cart/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            productId,
                            quantity: parseInt(document.querySelector('#quantity').value) || 1
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Update cart count and total in header
                            const cartCountElement = document.querySelector('.cart-count');
                            const cartTotalElement = document.querySelector('.cart-total');
                            
                            if (cartCountElement) {
                                cartCountElement.textContent = data.cart.count;
                                cartCountElement.style.display = data.cart.count > 0 ? 'flex' : 'none';
                            }
                            if (cartTotalElement) {
                                cartTotalElement.textContent = `₹${data.cart.total}`;
                            }

                            Swal.fire({
                                icon: 'success',
                                title: 'Added to Cart!',
                                text: 'Product has been added to your cart',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            throw new Error(data.message || 'Error adding to cart');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'An error occurred. Please try again.',
                            confirmButtonColor: '#22C55E'
                        });
                    });
                })
                .catch(error => {
                    console.error('Auth check error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while checking authentication',
                        confirmButtonColor: '#22C55E'
                    });
                });
        }

        // Function to handle quantity changes
        function updateQuantity(change) {
            const quantityInput = document.querySelector('#quantity');
            const currentQuantity = parseInt(quantityInput.value);
            const maxStock = parseInt(quantityInput.getAttribute('data-max-stock'));
            const newQuantity = currentQuantity + change;

            // Check minimum quantity
            if (newQuantity < 1) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Minimum Quantity',
                    text: 'Quantity cannot be less than 1',
                    showConfirmButton: false,
                    timer: 1500,
                    confirmButtonColor: '#22C55E'
                });
                return;
            }

            // Check maximum quantity (5 or available stock)
            const maxAllowed = Math.min(5, maxStock);
            if (newQuantity > maxAllowed) {
                const message = maxAllowed === 5 ? 
                    'Maximum 5 units allowed per item' : 
                    `Only ${maxAllowed} units available in stock`;
                
                Swal.fire({
                    icon: 'warning',
                    title: 'Quantity Limit Reached',
                    text: message,
                    showConfirmButton: false,
                    timer: 2000,
                    confirmButtonColor: '#22C55E'
                });
                return;
            }

            quantityInput.value = newQuantity;
        }

        // Initialize quantity input
        document.addEventListener('DOMContentLoaded', function() {
            const quantityInput = document.querySelector('#quantity');
            if (quantityInput) {
                quantityInput.addEventListener('change', function() {
                    const value = parseInt(this.value);
                    const maxStock = parseInt(this.getAttribute('data-max-stock'));
                    const maxAllowed = Math.min(5, maxStock);

                    if (value < 1) {
                        this.value = 1;
                    } else if (value > maxAllowed) {
                        this.value = maxAllowed;
                        const message = maxAllowed === 5 ? 
                            'Maximum 5 units allowed per item' : 
                            `Only ${maxAllowed} units available in stock`;
                        
                        Swal.fire({
                            icon: 'warning',
                            title: 'Quantity Adjusted',
                            text: message,
                            showConfirmButton: false,
                            timer: 2000,
                            confirmButtonColor: '#22C55E'
                        });
                    }
                });
            }
        });

        function toggleWishlist(productId) {
            // Check if user is logged in first
            fetch('/check-auth')
                .then(response => response.json())
                .then(data => {
                    if (!data.authenticated) {
                        Swal.fire({
                            title: 'Please Login',
                            text: 'You need to login to add items to wishlist',
                            icon: 'info',
                            showCancelButton: true,
                            confirmButtonText: 'Login',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/login';
                            }
                        });
                        return;
                    }

                    const wishlistBtn = document.querySelector('.wishlist-btn');
                    const isInWishlist = wishlistBtn.classList.contains('wishlist-active');

                    const endpoint = isInWishlist ? `/wishlist/remove/${productId}` : '/wishlist/add';
                    const method = isInWishlist ? 'DELETE' : 'POST';

                    fetch(endpoint, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: method === 'POST' ? JSON.stringify({ productId }) : undefined
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            wishlistBtn.classList.toggle('wishlist-active');
                            
                            // Update wishlist count in header
                            const wishlistCount = document.querySelector('.wishlist-count');
                            if (wishlistCount) {
                                const currentCount = parseInt(wishlistCount.textContent || '0');
                                wishlistCount.textContent = isInWishlist ? currentCount - 1 : currentCount + 1;
                                wishlistCount.style.display = currentCount > 0 ? 'flex' : 'none';
                            }
                            
                            Swal.fire({
                                icon: 'success',
                                title: isInWishlist ? 'Removed from Wishlist!' : 'Added to Wishlist!',
                                text: isInWishlist ? 
                                    'Product has been removed from your wishlist' : 
                                    'Product has been added to your wishlist',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            throw new Error(data.message || 'Error updating wishlist');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'An error occurred. Please try again.'
                        });
                    });
                })
                .catch(error => {
                    console.error('Auth check error:', error);
                });
        }

        $(document).ready(function() {
            // Initialize xzoom
            $('.xzoom, .xzoom-gallery').xzoom({
                position: 'right', // Lens position
                mposition: 'inside', // Magnifier position
                rootOutput: true,
                fadeIn: true,
                fadeTrans: true,
                fadeOut: false,
                smooth: true,
                adaptive: true,
                lensShape: 'box',
                zoomWidth: 400,
                zoomHeight: 400,
                sourceClass: 'xzoom-source',
                loadingClass: 'xzoom-loading',
                lensClass: 'xzoom-lens',
                zoomClass: 'xzoom-preview',
                activeClass: 'active',
                hover: true,
                adaptive: true,
                lensSize: 200
            });

            // Handle thumbnail clicks
            $('.xzoom-gallery').click(function(e) {
                e.preventDefault();
                $('.xzoom-gallery').removeClass('active');
                $(this).addClass('active');
            });

            // Optional: Add touch support for mobile
            if ('ontouchstart' in window) {
                $('.xzoom-container').on('touchstart', function() {
                    $('.xzoom-preview').css('display', 'block');
                }).on('touchend', function() {
                    $('.xzoom-preview').css('display', 'none');
                });
            }
        });

        // Initialize EasyZoom
        $(document).ready(function() {
            let $easyzoom = $('.easyzoom').easyZoom();
            let api = $easyzoom.data('easyZoom');

            // Handle thumbnail clicks
            function changeMainImage(thumbnailElement, newSrc) {
                // Update main image and zoom
                api.swap(newSrc, newSrc);

                // Update active thumbnail
                document.querySelectorAll('.thumbnail').forEach(thumb => {
                    thumb.classList.remove('active');
                });
                thumbnailElement.classList.add('active');
            }

            // Handle mobile devices
            if ('ontouchstart' in window) {
                // Disable zoom on mobile and implement click to enlarge
                api.teardown();
                
                $('#mainImage').click(function() {
                    window.open($(this).attr('src'), '_blank');
                });
            }
        });
    </script>
</body>
</html> 