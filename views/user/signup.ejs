<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Account</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        .input-container {
            position: relative;
        }
        .eye-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #666;
        }
        .error-message {
            display: none;
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .loading-spinner {
            display: inline-block;
            width: 1.25rem;
            height: 1.25rem;
            margin-right: 0.5rem;
            border: 2px solid currentColor;
            border-right-color: transparent;
            border-radius: 50%;
            animation: spin 0.75s linear infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <%- include('../layouts/headerWithoutUser.ejs') %>

    <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-sm border border-gray-200">
            <div class="text-center">
                <h2 class="text-3xl font-bold text-gray-900">Create Account</h2>
            </div>

            <form class="mt-8 space-y-6" id="registrationForm" action="/signup" method="POST">
                <!-- First Name Input -->
                <div class="form-group">
                    <div class="relative">
                        <input id="fname" name="fname" type="text"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="First Name">
                        <div class="error-message text-red-600 text-sm mt-1" id="fname-error"></div>
                    </div>
                </div>

                <!-- Last Name Input -->
                <div class="form-group">
                    <div class="relative">
                        <input id="lname" name="lname" type="text"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="Last Name">
                        <div class="error-message text-red-600 text-sm mt-1" id="lname-error"></div>
                    </div>
                </div>

                <!-- Email Input -->
                <div class="form-group">
                    <div class="relative">
                        <input id="email" name="email" type="email"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="Email">
                        <div class="error-message text-red-600 text-sm mt-1" id="email-error"></div>
                    </div>
                </div>

                <!-- Phone Number Input -->
                <div class="form-group">
                    <div class="relative">
                        <input id="phone" name="phone" type="tel"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="Phone Number">
                        <div class="error-message text-red-600 text-sm mt-1" id="phone-error"></div>
                    </div>
                </div>

                <!-- Password Input -->
                <div class="form-group">
                    <div class="input-container">
                        <input id="password" name="password" type="password"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="Password">
                        <i class="fa-regular fa-eye eye-icon" id="togglePassword"></i>
                        <div class="error-message text-red-600 text-sm mt-1" id="password-error"></div>
                    </div>
                </div>

                <!-- Confirm Password Input -->
                <div class="form-group">
                    <div class="input-container">
                        <input id="confirmPassword" name="confirmPassword" type="password"
                            class="appearance-none rounded relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                            placeholder="Confirm Password">
                        <i class="fa-regular fa-eye eye-icon" id="toggleConfirmPassword"></i>
                        <div class="error-message text-red-600 text-sm mt-1" id="confirmPassword-error"></div>
                    </div>
                </div>

                <!-- Global Error Message -->
                <div id="globalError" class="text-red-600 text-sm text-center hidden"></div>

                <!-- Create Account Button -->
                <div>
                    <button type="submit" id="submitButton"
                        class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-full text-white bg-green-500 hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Create Account
                    </button>
                </div>

                <!-- Login Link -->
                <div class="text-center text-sm">
                    <span class="text-gray-600">Already have account?</span>
                    <a href="/login" class="font-medium text-green-600 hover:text-green-500 ml-1">
                        Login
                    </a>
                </div>
            </form>
        </div>
    </div>

    <%- include('../layouts/footer.ejs') %>

    <script>
        // Validation configurations
        const validationRules = {
            fname: {
                required: true,
                minLength: 2,
                pattern: /^[A-Za-z\s]+$/,
                errorMessages: {
                    required: 'First name is required',
                    minLength: 'First name must be at least 2 characters',
                    pattern: 'First name can only contain letters and spaces'
                }
            },
            lname: {
                required: true,
                minLength: 1,
                pattern: /^[A-Za-z\s]+$/,
                errorMessages: {
                    required: 'Last name is required',
                    minLength: 'Last name must be at least 2 characters',
                    pattern: 'Last name can only contain letters and spaces'
                }
            },
            email: {
                required: true,
                pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                errorMessages: {
                    required: 'Email is required',
                    pattern: 'Please enter a valid email address'
                }
            },
            phone: {
                required: true,
                pattern: /^\+?[\d\s-]{10,}$/,
                errorMessages: {
                    required: 'Phone number is required',
                    pattern: 'Please enter a valid phone number'
                }
            },
            password: {
                required: true,
                minLength: 8,
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
                errorMessages: {
                    required: 'Password is required',
                    minLength: 'Password must be at least 8 characters',
                    pattern: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'
                }
            },
            confirmPassword: {
                required: true,
                match: 'password',
                errorMessages: {
                    required: 'Please confirm your password',
                    match: 'Passwords do not match'
                }
            }
        };

        // Setup password toggles
        function setupPasswordToggle(passwordId, toggleId) {
            const togglePassword = document.querySelector(`#${toggleId}`);
            const password = document.querySelector(`#${passwordId}`);

            togglePassword.addEventListener('click', function() {
                const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                password.setAttribute('type', type);
                this.classList.toggle('fa-eye');
                this.classList.toggle('fa-eye-slash');
            });
        }

        setupPasswordToggle('password', 'togglePassword');
        setupPasswordToggle('confirmPassword', 'toggleConfirmPassword');

        // Show global error message
        function showGlobalError(message) {
            const globalError = document.getElementById('globalError');
            globalError.textContent = message;
            globalError.classList.remove('hidden');
            setTimeout(() => {
                globalError.classList.add('hidden');
            }, 5000);
        }

        // Validate single field
        function validateField(field) {
            const value = field.value.trim();
            const fieldName = field.id;
            const rules = validationRules[fieldName];
            const errorElement = document.getElementById(`${fieldName}-error`);
            let isValid = true;
            let errorMessage = '';

            // Reset field styles
            field.classList.remove('border-red-500', 'border-green-500');
            errorElement.style.display = 'none';

            if (rules.required && !value) {
                isValid = false;
                errorMessage = rules.errorMessages.required;
            } else if (value && rules.minLength && value.length < rules.minLength) {
                isValid = false;
                errorMessage = rules.errorMessages.minLength;
            } else if (value && rules.pattern && !rules.pattern.test(value)) {
                isValid = false;
                errorMessage = rules.errorMessages.pattern;
            } else if (rules.match) {
                const matchField = document.getElementById(rules.match);
                if (value !== matchField.value) {
                    isValid = false;
                    errorMessage = rules.errorMessages.match;
                }
            }

            // Apply validation styles
            if (!isValid) {
                field.classList.add('border-red-500');
                errorElement.textContent = errorMessage;
                errorElement.style.display = 'block';
            } else {
                field.classList.add('border-green-500');
            }

            return isValid;
        }

        // Setup real-time validation
        Object.keys(validationRules).forEach(fieldName => {
            const field = document.getElementById(fieldName);
            field.addEventListener('blur', () => validateField(field));
            field.addEventListener('input', () => validateField(field));
        });

        // Update button state
        function updateButtonState(isLoading, message = 'Create Account') {
            const button = document.querySelector('#submitButton');
            button.disabled = isLoading;
            button.innerHTML = isLoading ? 
                `<div class="loading-spinner"></div>${message}` : 
                message;
        }

        // Form submission handler
        const form = document.querySelector('#registrationForm');
        
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            let isValid = true;

            // Validate all fields
            Object.keys(validationRules).forEach(fieldName => {
                if (!validateField(document.getElementById(fieldName))) {
                    isValid = false;
                }
            });

            if (!isValid) {
                showGlobalError('Please fix the errors before submitting.');
                return;
            }

            // Show loading state
            updateButtonState(true, 'Creating account...');

            // Submit the form
            form.submit();
        });
    </script> 
</body>
</html>