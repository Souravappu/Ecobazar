<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Address - Checkout</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .error-message {
            color: #DC2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }
        .error-message.show {
            display: block;
        }
        .input-error {
            border-color: #DC2626 !important;
            background-color: #FEF2F2;
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../layouts/checkoutHeader.ejs', { title: 'Edit Address' }) %>

    <main class="container mx-auto py-8 px-4">
        <div class="max-w-2xl mx-auto">
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold mb-6">Edit Address</h2>

                <form id="addressForm" action="/checkout/edit-address/<%= address._id %>" method="POST" class="space-y-6">
                    <!-- Address Type Selection -->
                    <div class="grid grid-cols-3 gap-4">
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Home" class="sr-only peer" 
                                   <%= address.addressType === 'Home' ? 'checked' : '' %>>
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-home mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Home</p>
                            </div>
                        </label>
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Office" class="sr-only peer"
                                   <%= address.addressType === 'Office' ? 'checked' : '' %>>
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-building mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Office</p>
                            </div>
                        </label>
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Other" class="sr-only peer"
                                   <%= address.addressType === 'Other' ? 'checked' : '' %>>
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-location-dot mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Other</p>
                            </div>
                        </label>
                    </div>

                    <!-- Form Fields -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700">Full Name</label>
                            <input type="text" name="name" value="<%= address.name %>" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="name"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                            <input type="tel" name="phone" value="<%= address.phone %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="phone"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Postal Code</label>
                            <input type="text" name="postalCode" value="<%= address.postalCode %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="postalCode"></div>
                        </div>

                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700">Street Address</label>
                            <input type="text" name="street" value="<%= address.streetAddress %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="street"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Apartment/Suite (Optional)</label>
                            <input type="text" name="apartment" value="<%= address.apartment || '' %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="apartment"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Landmark (Optional)</label>
                            <input type="text" name="landMark" value="<%= address.landMark || '' %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="landMark"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">City</label>
                            <input type="text" name="city" value="<%= address.city %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="city"></div>
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="flex justify-end space-x-4 pt-6">
                        <a href="/checkout/view-addresses" 
                           class="px-6 py-3 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200 transition duration-300">
                            Cancel
                        </a>
                        <button type="submit" 
                                class="px-6 py-3 rounded-md text-white bg-green-600 hover:bg-green-700 transition duration-300">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script>
        const form = document.getElementById('addressForm');
        const validationRules = {
            name: {
                pattern: /^[A-Za-z\s]{3,50}$/,
                validate: (value) => {
                    value = value.trim();
                    if (!value) return "Name is required";
                    if (value.length < 3) return "Name should be at least 3 characters";
                    if (value.length > 50) return "Name should not exceed 50 characters";
                    if (!/^[A-Za-z]/.test(value)) return "Name should start with a letter";
                    if (!/^[A-Za-z\s]+$/.test(value)) return "Name should contain only letters and spaces";
                    if (/\s{2,}/.test(value)) return "Name should not contain consecutive spaces";
                    return null;
                }
            },
            phone: {
                pattern: /^[0-9]{10}$/,
                validate: (value) => {
                    value = value.trim();
                    if (!value) return "Phone number is required";
                    if (!/^\d+$/.test(value)) return "Phone number should contain only digits";
                    if (value.length !== 10) return "Phone number should be exactly 10 digits";
                    return null;
                }
            },
            postalCode: {
                pattern: /^[0-9]{6}$/,
                validate: (value) => {
                    value = value.trim();
                    if (!value) return "Postal code is required";
                    if (!/^\d+$/.test(value)) return "Postal code should contain only digits";
                    if (value.length !== 6) return "Postal code should be exactly 6 digits";
                    return null;
                }
            },
            street: {
                pattern: /^[A-Za-z0-9\s,.-]{5,100}$/,
                validate: (value) => {
                    value = value.trim();
                    if (!value) return "Street address is required";
                    if (value.length < 5) return "Street address should be at least 5 characters";
                    if (value.length > 100) return "Street address should not exceed 100 characters";
                    if (/^\s/.test(value)) return "Street address should not start with space";
                    if (/\s{2,}/.test(value)) return "Street address should not contain consecutive spaces";
                    if (!/^[A-Za-z0-9\s,.-]+$/.test(value)) return "Street address contains invalid characters";
                    return null;
                }
            },
            city: {
                pattern: /^[A-Za-z\s]{3,30}$/,
                validate: (value) => {
                    value = value.trim();
                    if (!value) return "City is required";
                    if (value.length < 3) return "City should be at least 3 characters";
                    if (value.length > 30) return "City should not exceed 30 characters";
                    if (!/^[A-Za-z]/.test(value)) return "City should start with a letter";
                    if (!/^[A-Za-z\s]+$/.test(value)) return "City should contain only letters and spaces";
                    if (/\s{2,}/.test(value)) return "City should not contain consecutive spaces";
                    return null;
                }
            },
            apartment: {
                validate: (value) => {
                    value = value.trim();
                    if (value && value.length > 50) return "Apartment/Suite should not exceed 50 characters";
                    if (value && /\s{2,}/.test(value)) return "Apartment/Suite should not contain consecutive spaces";
                    if (value && !/^[A-Za-z0-9\s,.-]+$/.test(value)) return "Apartment/Suite contains invalid characters";
                    return null;
                }
            },
            landMark: {
                validate: (value) => {
                    value = value.trim();
                    if (value && value.length > 50) return "Landmark should not exceed 50 characters";
                    if (value && /\s{2,}/.test(value)) return "Landmark should not contain consecutive spaces";
                    if (value && !/^[A-Za-z0-9\s,.-]+$/.test(value)) return "Landmark contains invalid characters";
                    return null;
                }
            }
        };

        function showError(input, message) {
            const errorElement = document.querySelector(`[data-error="${input.name}"]`);
            input.classList.add('input-error');
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }

        function clearError(input) {
            const errorElement = document.querySelector(`[data-error="${input.name}"]`);
            input.classList.remove('input-error');
            errorElement.classList.remove('show');
        }

        function validateField(input) {
            const rules = validationRules[input.name];
            if (!rules) return true;

            const value = input.value;
            const error = rules.validate(value);
            
            if (error) {
                showError(input, error);
                return false;
            }

            clearError(input);
            return true;
        }

        // Real-time validation with debounce
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        form.querySelectorAll('input').forEach(input => {
            if (validationRules[input.name]) {
                const debouncedValidate = debounce(() => validateField(input), 300);
                input.addEventListener('input', debouncedValidate);
                input.addEventListener('blur', () => validateField(input));
            }
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            let isValid = true;

            // Validate all fields
            form.querySelectorAll('input').forEach(input => {
                if (validationRules[input.name] && !validateField(input)) {
                    isValid = false;
                }
            });

            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please check the form for errors'
                });
                return;
            }

            try {
                const formData = new FormData(form);
                const formDataObj = {};
                
                // Trim all values before sending
                formData.forEach((value, key) => {
                    formDataObj[key] = value.trim();
                });

                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formDataObj)
                });

                const data = await response.json();
                
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = '/checkout/view-addresses';
                    });
                } else {
                    throw new Error(data.message || 'Failed to update address');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while updating the address'
                });
            }
        });
    </script>
</body>
</html> 