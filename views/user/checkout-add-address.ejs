<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Addresses - Checkout</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .error-message {
            display: none;
            color: #EF4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .error-message.show {
            display: block;
        }
        
        .input-error {
            border-color: #EF4444 !important;
        }
        
        input:focus {
            outline: none;
            border-color: #10B981;
            box-shadow: 0 0 0 1px #10B981;
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../layouts/checkoutHeader.ejs', { title: 'Manage Addresses' }) %>

    <main class="container mx-auto py-8 px-4">
        <div class="max-w-3xl mx-auto">
            <!-- Existing Addresses Section -->
            <% if (addresses && addresses.length > 0) { %>
                <div class="mb-8">
                    <h2 class="text-xl font-semibold mb-4">Your Addresses</h2>
                    <div class="space-y-4">
                        <% addresses.forEach(address => { %>
                            <div class="bg-white rounded-lg shadow-sm p-4 border <%= address.isDefault ? 'border-green-500' : 'border-gray-200' %>">
                                <div class="flex justify-between items-start">
                                    <div class="flex-1">
                                        <div class="flex items-center gap-2 mb-1">
                                            <h3 class="font-medium"><%= address.name %></h3>
                                            <span class="text-sm text-gray-500">(<%= address.addressType %>)</span>
                                            <% if (address.isDefault) { %>
                                                <span class="text-xs bg-green-100 text-green-600 px-2 py-1 rounded">Default</span>
                                            <% } %>
                                        </div>
                                        <p class="text-gray-600"><%= address.streetAddress %></p>
                                        <p class="text-gray-600"><%= address.city %>, <%= address.postalCode %></p>
                                        <p class="text-gray-600">Phone: <%= address.phone %></p>
                                    </div>
                                    <div class="flex gap-2">
                                        <button onclick="editAddress('<%= address._id %>')"
                                                class="text-blue-600 hover:text-blue-700">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <% if (!address.isDefault) { %>
                                            <button onclick="setDefaultAddress('<%= address._id %>')"
                                                    class="text-green-600 hover:text-green-700">
                                                <i class="fas fa-check-circle"></i>
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% } %>

            <!-- Add New Address Form -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold mb-6">
                    <%= addresses && addresses.length > 0 ? 'Add Another Address' : 'Add New Address' %>
                </h2>

                <form id="addressForm" action="/checkout/add-address" method="POST" class="space-y-6">
                    <!-- Address Type Selection -->
                    <div class="grid grid-cols-3 gap-4">
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Home" class="sr-only peer" checked>
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-home mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Home</p>
                            </div>
                        </label>
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Office" class="sr-only peer">
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-building mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Office</p>
                            </div>
                        </label>
                        <label class="flex-1">
                            <input type="radio" name="addressType" value="Other" class="sr-only peer">
                            <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-green-500 peer-checked:bg-green-50 hover:border-green-200">
                                <i class="fas fa-location-dot mb-2 text-xl text-green-500"></i>
                                <p class="font-medium">Other</p>
                            </div>
                        </label>
                    </div>

                    <!-- Form Fields -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700">Full Name</label>
                            <input type="text" name="name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="name"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                            <input type="tel" name="phone" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="phone"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Postal Code</label>
                            <input type="text" name="postalCode" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="postalCode"></div>
                        </div>

                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700">Street Address</label>
                            <input type="text" name="street" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="street"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Apartment/Suite (Optional)</label>
                            <input type="text" name="apartment" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="apartment"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Landmark (Optional)</label>
                            <input type="text" name="landMark" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="landMark"></div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">City</label>
                            <input type="text" name="city" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <div class="error-message" data-error="city"></div>
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="flex justify-end space-x-4 pt-6">
                        <a href="/checkout" class="px-6 py-3 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200 transition duration-300">
                            Back to Checkout
                        </a>
                        <button type="submit" class="px-6 py-3 rounded-md text-white bg-green-600 hover:bg-green-700 transition duration-300">
                            Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script>
        const form = document.getElementById('addressForm');
        const validationRules = {
            name: {
                pattern: /^[A-Za-z\s]{3,50}$/,
                message: 'Name should be 3-50 characters long and contain only letters'
            },
            phone: {
                pattern: /^[0-9]{10}$/,
                message: 'Please enter a valid 10-digit phone number'
            },
            postalCode: {
                pattern: /^[0-9]{6}$/,
                message: 'Please enter a valid 6-digit postal code'
            },
            street: {
                pattern: /^[A-Za-z0-9\s,.-]{5,100}$/,
                message: 'Street address should be between 5 and 100 characters'
            },
            city: {
                pattern: /^[A-Za-z\s]{3,30}$/,
                message: 'City should be between 3 and 30 characters'
            }
        };

        function showError(input, message) {
            const errorElement = document.querySelector(`[data-error="${input.name}"]`);
            input.classList.add('input-error');
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }

        function clearError(input) {
            const errorElement = document.querySelector(`[data-error="${input.name}"]`);
            input.classList.remove('input-error');
            errorElement.classList.remove('show');
        }

        function validateField(input) {
            const rules = validationRules[input.name];
            if (!rules) return true;

            const value = input.value.trim();
            if (!value && input.required) {
                showError(input, `${input.name.charAt(0).toUpperCase() + input.name.slice(1)} is required`);
                return false;
            }

            if (value && !rules.pattern.test(value)) {
                showError(input, rules.message);
                return false;
            }

            clearError(input);
            return true;
        }

        // Real-time validation
        form.querySelectorAll('input').forEach(input => {
            if (validationRules[input.name]) {
                input.addEventListener('input', () => validateField(input));
                input.addEventListener('blur', () => validateField(input));
            }
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Clear previous error messages
            document.querySelectorAll('.error-message').forEach(elem => {
                elem.textContent = '';
                elem.classList.remove('show');
            });
            
            // Reset input styles
            form.querySelectorAll('input').forEach(input => {
                input.classList.remove('border-red-500');
            });

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData))
                });

                const data = await response.json();
                
                if (!data.success) {
                    // Handle validation errors
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, message]) => {
                            const errorElement = document.querySelector(`[data-error="${field}"]`);
                            const inputElement = form.querySelector(`[name="${field}"]`);
                            
                            if (errorElement) {
                                errorElement.textContent = message;
                                errorElement.classList.add('show');
                            }
                            
                            if (inputElement) {
                                inputElement.classList.add('border-red-500');
                            }
                        });
                        
                        // Show error alert
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please check the form for errors',
                            confirmButtonColor: '#10B981'
                        });
                        return;
                    }
                    throw new Error(data.message);
                }

                // Success case
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Address added successfully',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.href = '/checkout';
                });
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while saving the address',
                    confirmButtonColor: '#10B981'
                });
            }
        });

        // Add these functions for address management
        function editAddress(addressId) {
            window.location.href = `/checkout/edit-address/${addressId}`;
        }

        function setDefaultAddress(addressId) {
            fetch(`/profile/set-default-address/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Default address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while updating default address'
                });
            });
        }
    </script>
</body>
</html> 